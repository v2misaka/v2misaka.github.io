<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hi</title>
    <url>/2021/12/18/Hi/</url>
    <content><![CDATA[<p>v2misaka is here!</p>
<p> Hope you can find something you want~</p>
<p>~misakamisaka says with greetings.</p>
]]></content>
  </entry>
  <entry>
    <title>Basics of Orca</title>
    <url>/2023/11/15/Basic-orca/</url>
    <content><![CDATA[<p>This post is for some basic use of <strong>Orca</strong>。</p>
<span id="more"></span>
<h1 id="input-file">Input file</h1>
<h2 id="how-to-generate-an-input-file">How to generate an input
file</h2>
<p>Orca only use one input file: <code>filename.inp</code>, which is an
ASCII encoded file.</p>
<h3 id="for-linux">For Linux</h3>
<p>Just simply create <code>filename.inp</code>. And make sure the
<strong>End of line Sequence</strong> is <code>LF</code>.</p>
<h3 id="for-windows">For Windows</h3>
<p>Orca input file can be generated by <strong>Avogadro</strong> program
in Windows, which can be downloaded it from <a
href="https://orcaforum.kofo.mpg.de/app.php/portal">Orca Forum</a>.</p>
<p>If you want to generate input file by yourself, you can create a
<code>filename.txt</code> file, then save it as
<code>filename.inp</code>, and remember to change the file type to be
<code>All files</code>.</p>
<p><strong>VS Code</strong> is recommended for Windows users, because it
enables Linux-like approach to create files.</p>
<h2 id="structure-of-input-file">Structure of input file</h2>
<p>The common structure for Orca input file is as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Keywords</span><br><span class="line"># comments(You can write anything here)</span><br><span class="line">%input blocks</span><br><span class="line">*cordinates</span><br><span class="line">*</span><br></pre></td></tr></table></figure>
<p>For more detailed information, please refer to <strong>Orca
manual</strong> or <a
href="https://sites.google.com/site/orcainputlibrary/home?authuser=0">this
useful web page</a>. And there is some input files I saved as examples,
which can be found at the <a href="#example_jump">Examples</a> part.</p>
<h3 id="keywords">Keywords</h3>
<h4 id="basic-settings">Basic settings</h4>
<p>The keyword lines start with a <code>!</code>, which define the job
type and the methods we use, for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! opt HF 6-31G</span><br><span class="line"># Job type: geometry optimization</span><br><span class="line"># Method: Hatree-Fock</span><br><span class="line"># Basis set: 6-31G</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! M062X def2-TZVP</span><br><span class="line"># Job type: single point calculation</span><br><span class="line"># Method: DFT </span><br><span class="line"># Exchange-correlation Functional: M062X</span><br><span class="line"># Basis set: def2-TZVP</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE:<br/>  1. You can write as many lines of keywords as you
want.<br/>  2. If no job type is defined, job type will be
<code>single point calculation</code>.<br/>  3. For DFT, you just need
to define the functional, which means that <code>!B3LYP</code> and
<code>!DFT B3LYP</code> are the same.</p>
</blockquote>
<h4 id="restart-job">Restart job</h4>
<p><code>!moread</code> enables you to read the wavefunction file
<code>*.gbw</code> from an interrupped job. job. After
<code>!moread</code>, a <code>%moinp</code> block is necessary, eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!moread</span><br><span class="line">%moinp &quot;lastwork.gbw&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE:  The name of <code>*.gbw</code> file <strong>must</strong> be
different from the file name of current job.</p>
</blockquote>
<h4 id="run-parallel-jobs">Run parallel jobs</h4>
<p>There are two ways to set up parallel jobs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! PAL4</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%pal</span><br><span class="line">    nprocs 4</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>Both of them means using 4 parallel processes. &gt;NOTE:  Orca should
be called with full path for parallel jobs.</p>
<h3 id="input-blocks">Input blocks</h3>
<p>Input blocks are for detailed settings of the calculation, here I
only list two frequently used input blocks. For more details, please
refer to the Orca manual.</p>
<h4 id="tddft-settings">TDDFT settings</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%tddft # Settings for TDDFT calculation</span><br><span class="line">    nroots 5 # How many excited states</span><br><span class="line">    dosoc true # Calculate SOC</span><br><span class="line">    tda false # Set Tamm-Dancoff approximation</span><br><span class="line">end #don&#x27;t forget end</span><br></pre></td></tr></table></figure>
<p>If you want to obtain the structures of excited states:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%tddft</span><br><span class="line">    IRoot 1 #Here means the first excited state</span><br><span class="line">    IRootMult Singlet # (or Triplet) setting S or T</span><br><span class="line">    tda false</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="solvent-settings">Solvent settings</h4>
<p>First, a keyword line is needed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!CPCM(water)</span><br></pre></td></tr></table></figure>
<p>And an input block for detailed settings:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%cpcm</span><br><span class="line">    smd true</span><br><span class="line">    SMDsolvent &quot;water&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="coordinates-input">Coordinates input</h3>
<p>Coordinates can be directly input as:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*coordinate_type charge multiplicity</span><br><span class="line">    atom_type coordinates</span><br><span class="line">    atom_type coordinates</span><br><span class="line">*</span><br></pre></td></tr></table></figure>
<p>For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*xyz 0 1</span><br><span class="line">O   0.305   0.240   0.000</span><br><span class="line">H   0.305   0.702   0.000</span><br><span class="line">H   0.610   0.463   0.000</span><br><span class="line">*</span><br></pre></td></tr></table></figure>
<p>You can also input coordinates from file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*xyzfile charge multiplicity filename.xyz</span><br><span class="line"># to input from orca xyz file.</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*gzmtfile charge multiplicity filename.gzmt</span><br><span class="line"># to input from Gaussian Z-Matrices files.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE:<br/>  1. After the file name, there <strong>MUST</strong> be a
new line to prevent error.<br/>  2. Filename should NOT be the same as
input file name.</p>
</blockquote>
<h2 id="settings-for-b2plyp-functional">Settings for B2PLYP
functional</h2>
<p>In B2PLYP functional, a given density functional(Becke88) is mixed
with HF-exchange in a fraction of <span
class="math inline">\(c_x\)</span>. The correlation energy of DFT is
also mixed with MP2 correlation energy in a fraction of <span
class="math inline">\(c_c\)</span>. The total exchange correlation
energy can be expressed as:</p>
<p><span class="math display">\[\begin{equation}
E_\text{XC}=c_\text{X}E_\text{X,HF}+(1-c_\text{X})E_\text{X,DFT}+c_\text{C}E_\text{C,MP2}+(1-c_\text{C})E_\text{C,DFT}
\end{equation}\]</span></p>
<p>This can be defined in Orca as:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%method</span><br><span class="line">    ScalHFX = cx</span><br><span class="line">    ScalDFX = 1-cx</span><br><span class="line">    ScalGGAC = 1-cc</span><br><span class="line">    ScalLDAC = 1-cc</span><br><span class="line">    ScalMP2C = cc</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>In order to do B2PLYP calculation by Orca, in addition to normal
basis-set, auxiliary basis-set for correlation calculations is
neccesary. For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! B2PLYP</span><br><span class="line">! def2-TZVP def2-TZVP/c #define both the basis-set and the auxiliary basis-set.</span><br></pre></td></tr></table></figure>
<p>For the auxiliary basis-sets available in Orca, please refer to the
official manual of Orca.</p>
<h1 id="how-to-run-orca">How to run Orca</h1>
<p>The command to run Orca is simple:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;path_of_orca&gt;/orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>
<p>And you can also add one line in your <code>.bashrc</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias orca=&lt;path_of_orca&gt;/orca</span><br></pre></td></tr></table></figure>
<p>Then you can run orca with:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE:  Orca <strong>MUST</strong> be called with full path for
parallel jobs.</p>
</blockquote>
<h1 id="output-analysis">Output analysis</h1>
<p>You can find all the output in the <code>.out</code> file.</p>
<h2 id="final-energy">Final energy</h2>
<p>For the final energy, search <code>FINAL SINGLE POINT ENERGY</code>
in the <code>.out</code> file.</p>
<h2 id="homo-and-lumo">HOMO and LUMO</h2>
<h3 id="orbital-energy">Orbital energy</h3>
<p>Search <code>ORBITAL ENERGIES</code> in the <code>.out</code> file.
The second column(<code>OCC</code>) means the occupation number of the
orbital, and the last column represents the orbital energy with the unit
of <code>eV</code> For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">108 2.0000  -0.290681   -7.9098</span><br><span class="line">109 2.0000  -0.243684   -6.6310</span><br><span class="line">110 2.0000  -0.241963   -6.5842</span><br><span class="line">111 0.0000  -0.069260   -1.8847</span><br><span class="line">112 0.0000  -0.042617   -1.1597</span><br><span class="line">113 0.0000  0.009858    0.2682</span><br></pre></td></tr></table></figure>
<p>Here, orbital 110 is the HOMO, and orbital 111 is the LUMO.</p>
<h3 id="plot-the-orbital">Plot the orbital</h3>
<p>Please use the command <code>orca_plot gbw i</code> to plot the
orbitals. Choose output file type to be <code>Gaussian cube</code> to
visualize it in <code>Gaussview</code>.</p>
<h2 id="soc-constant">SOC Constant</h2>
<p>Search for
<code>CALCULATED SOCME BETWEEN TRIPLETS AND SINGLETS</code> in the
<code>.out</code> file, then you can find the x,y,z components of SOC
constant.</p>
<h1 id="examples"><span id="example_jump">Examples</span></h1>
<h2 id="geometry-optimization">Geometry optimization</h2>
<p>This is an example for geometry optimization.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!B3LYP 6-31g(d,p) opt tightscf</span><br><span class="line"># Functional and basis set. opt means the job type is opt. Default job type is single point calculation.</span><br><span class="line"></span><br><span class="line">%pal  # How many cores used</span><br><span class="line">    nprocs 36</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">!CPCM(water)  #solvent settings</span><br><span class="line">%cpcm</span><br><span class="line">    smd true</span><br><span class="line">    SMDsolvent &quot;water&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># Sinplest way to input cordinates.</span><br><span class="line">*xyz 0 1    #cordinates_type charge spin</span><br><span class="line">O 0 0 0</span><br><span class="line">*</span><br><span class="line"># Remember the &#x27;*&#x27; at the end!!!!!</span><br></pre></td></tr></table></figure>
<h2 id="soc-calculation">SOC calculation</h2>
<p>This is an example for calculating SOC matrix.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!M062X 6-31g(d,p) tightscf  # I think &#x27;tightscf&#x27; is the default setting.</span><br><span class="line"></span><br><span class="line">%tddft  # Settings for TDDFT calculation</span><br><span class="line">nroots 5    # How many excited states</span><br><span class="line">dosoc true  # Calculate SOC</span><br><span class="line">tda false   # Just close it, goes wrong easily.</span><br><span class="line">end     #don&#x27;t forget end</span><br><span class="line"></span><br><span class="line">%pal</span><br><span class="line">    nprocs 36   # How many cores for parallel running</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">!CPCM(water)    # Solvent settings</span><br><span class="line">%cpcm</span><br><span class="line">    smd true</span><br><span class="line">    SMDsolvent &quot;water&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#This is another way to input cordinates, remember to have a new line at the end.</span><br><span class="line">#This file should not be the same name as input file.</span><br><span class="line">*xyzfile 0 1 opt.xyz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*xyz 0 1</span><br><span class="line">O 0 0 0</span><br><span class="line">*</span><br></pre></td></tr></table></figure>
<h2 id="bash-script">Bash script</h2>
<p>This is the example of bash script to submit Orca calculation jobs
for the cluster of UFS Lab.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#$ -pe mpi_36 36</span><br><span class="line">#$ -N Orca_yourname</span><br><span class="line">#$ -S /bin/bash</span><br><span class="line">#$ -q all.q@node02</span><br><span class="line">#$ -V</span><br><span class="line">#$ -cwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;Got $NSLOTS slots.&quot;</span><br><span class="line"></span><br><span class="line">module load openmpi-4.1.1</span><br><span class="line"></span><br><span class="line">/opt/orca/orca_5_0_3/orca yourjob.inp&gt;yourjob.out</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Orca</category>
      </categories>
  </entry>
  <entry>
    <title>How to install CASTEP.</title>
    <url>/2021/12/28/How-to-install-CASTEP/</url>
    <content><![CDATA[<p>This post is <strong><em>not</em></strong> a substitute to official
tutorial, and is just a simplified version.<br />
If you have obtain CASTEP, after unpacking, you can read the official
install tutorial: <strong>README.INSTALL</strong></p>
<span id="more"></span>
A cost-free worldwide source code license to CASTEP and NMR CASTEP for
academic use is availible. Before reading this post, you can get CASTEP
through the website:
<center>
http://www.castep.org/CASTEP/GettingCASTEP
</center>
<p><br/></p>
<h1 id="system-environment">System Environment</h1>
<p>These are required to compile CASTEP:<br />
<strong><font size="4">1. Fortran 2003 compiler. </font></strong><br />
GNU fortran and Intel fortran are both availible. In the
<strong>README.INSTALL</strong> file there will be the recommended
version of Fortran compiler.</p>
<p><strong><font size="4">2. Numerical libraries. (implementing the
LAPACK and BLAS functionality)</font></strong><br />
Intel MKL is recommended as it also contains an optimised FFT library. I
use mkl included in Intel oneAPI.<br />
<strong><font size="4">3. GNU make version 3.81 or
later.</font></strong><br />
<strong><font size="4">4. Python.</font></strong><br />
<strong><font size="4">5. Optimised FFT library</font></strong><br />
<strong><font size="4">6. Openmpi</font></strong></p>
<h1 id="install">Install</h1>
<p>We use CASTEP-21.11 as an example.</p>
<p>First of all:</p>
<pre><code>tar -zxf CASTEP-21.11.tar.gz
cd CASTEP-21.1
make</code></pre>
<p>Then open the file: <em>Makefile</em><br />
Modify the value of <strong>FFT</strong> and <strong>MATHLIBS</strong>
to <code>mkl</code>. Save and quit.</p>
<p>Then install through code:</p>
<pre><code>make install</code></pre>
<p>After installation, you can check through code:</p>
<pre><code>make check FFT=mkl MATHLIBS=mkl</code></pre>
<h1 id="calling-the-programme">Calling the programme</h1>
<p>You can call the programme through code:</p>
<pre><code>castep.serial &lt;seedname&gt;</code></pre>
<p>If you have not (or cannot) add castep into <em>path</em>, use the
code:</p>
<pre><code> *...\linux_x86_64_ifort\castep.serial &lt;seedname&gt;</code></pre>
<h1 id="online-tutorials">Online Tutorials</h1>
<p align="left">
Online and official tutorial is availible through the website:
</p>
<center>
http://www.castep.org/CASTEP/OnlineTutorials
</center>
]]></content>
      <categories>
        <category>Tutorials</category>
        <category>CASTEP</category>
      </categories>
  </entry>
</search>
