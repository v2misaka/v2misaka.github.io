{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/V-safari.png","path":"images/V-safari.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/V-apple-touch.png","path":"images/V-apple-touch.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/V32x32.png","path":"images/V32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/V16x16.png","path":"images/V16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Basic-orca.md","hash":"8dc0810efbd14b3b3ab4042b5cb75ce91b72d779","modified":1722918422911},{"_id":"source/_posts/Hi.md","hash":"ca8745adbdfecbbb5436f98da6a3b57e5468b0a3","modified":1722918422912},{"_id":"source/_posts/Python-draft.md","hash":"d143149190f7f6b1625f3a78682505a6853b13bb","modified":1722918422913},{"_id":"source/_posts/How-to-install-CASTEP.md","hash":"6742c3555280c84a6bf90eb85057438d1ca0ac82","modified":1722918422912},{"_id":"source/about/index.md","hash":"bdaefd87cbca530e21fba7d332657b6415f495a9","modified":1722918422914},{"_id":"source/categories/index.md","hash":"56934f3201760ff34145856355cd586c923af1ae","modified":1722918422915},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1639819197000},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1639819197000},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1639819197000},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1639819197000},{"_id":"themes/next/Hi","hash":"776351ef196dbed5844a1140802b855498d7d81e","modified":1722919342279},{"_id":"themes/next/_config.yml","hash":"7bad2b94159b51a61c37e030cfc0306dca4f82e5","modified":1700547194000},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1639819197000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1639819197000},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1639819197000},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1639819197000},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1639819197000},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1639819197000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1639819197000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1639819197000},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1639819197000},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1639819197000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1639819197000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1639819197000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1639819197000},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1639819197000},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1639819197000},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1639819197000},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1639819197000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1639819197000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1639819197000},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1639819197000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1639819197000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1639819197000},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1639819197000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1639819197000},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1639819197000},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1639819197000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1639819197000},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1639819197000},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1639819197000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1639819197000},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1639819197000},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1639819197000},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1639819197000},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1639819197000},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1639819197000},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1639819197000},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1639819197000},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1639819197000},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1639819197000},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1639819197000},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1639819197000},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1639819197000},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1639819197000},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1639819197000},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1639819197000},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1639819197000},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1639819197000},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1639819197000},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1639819197000},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1639819197000},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1639819197000},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1639819197000},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1639819197000},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1639819197000},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1639819197000},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1639819197000},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1639819197000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1639819197000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1639819197000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1639819197000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1639819197000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1639819197000},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1639819197000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1639819197000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1639819197000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1639819197000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1639819197000},{"_id":"themes/next/layout/_macro/post.swig","hash":"97272822e8e153c328b28a9a2f690552db40d691","modified":1640788898000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1639819197000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1639819197000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1639819197000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1639819197000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1639819197000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1639819197000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1639819197000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1639819197000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1639819197000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1639819197000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1639819197000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1639819197000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1639819197000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1639819197000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1639819197000},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1639819197000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1639819197000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1639819197000},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1639819197000},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1639819197000},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1639819197000},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1639819197000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1639819197000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1639819197000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1639819197000},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1639819197000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1639819197000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1639819197000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1639819197000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1639819197000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1639819197000},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1639819197000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1639819197000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1639819197000},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1639819197000},{"_id":"themes/next/source/images/V-safari.png","hash":"18ac0aae9081e8d22bdec742bc08fe2ca20436eb","modified":1639836421000},{"_id":"themes/next/source/images/V-apple-touch.png","hash":"394cdd72ef2f2654d45161841e8cb45b5c01d1e3","modified":1639836459000},{"_id":"themes/next/source/images/V32x32.png","hash":"94f197ff1b47a8c9c7a8ad252d267fbf25b1f29d","modified":1639836177000},{"_id":"themes/next/source/images/V16x16.png","hash":"cd0d61dd70e646540b13f0f6363b4e332e8d72b5","modified":1639836143000},{"_id":"themes/next/source/images/avatar.jpg","hash":"e3a80bc1a1b144b670f2b39404edbf83f0040c55","modified":1639832074000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1639819197000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1639819197000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1639819197000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1639819197000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1639819197000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1639819197000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1639819197000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1639819197000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1639819197000},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1639819197000},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1639819197000},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1639819197000},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1639819197000},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1639819197000},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1639819197000},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1639819197000},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1639819197000},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1639819197000},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1639819197000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1639819197000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1639819197000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1639819197000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1639819197000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1639819197000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1639819197000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1639819197000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1639819197000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1639819197000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1639819197000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1639819197000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1639819197000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1639819197000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1639819197000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1639819197000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1639819197000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1639819197000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1639819197000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1639819197000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1639819197000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1639819197000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1639819197000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1639819197000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1639819197000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1639819197000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1639819197000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1639819197000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1639819197000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1639819197000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1639819197000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1639819197000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1639819197000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1639819197000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1639819197000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1639819197000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1639819197000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1639819197000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1639819197000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1639819197000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1639819197000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1639819197000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1639819197000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1639819197000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1639819197000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1639819197000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1639819197000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1639819197000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1639819197000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1639819197000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1639819197000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1639819197000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1639819197000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1639819197000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1639819197000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1639819197000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1639819197000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1639819197000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1639819197000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1639819197000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1639819197000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1639819197000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1639819197000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1639819197000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1639819197000},{"_id":"public/search.xml","hash":"0a08ed4fc21e2cab6bee603ce183bcf20631814c","modified":1722919807771},{"_id":"public/about/index.html","hash":"3cf03c06f382b4a070957b16430386815eaa87d0","modified":1722919807771},{"_id":"public/categories/index.html","hash":"36119af459df8b54e6a21ae742e8788f82e0fa33","modified":1722919807771},{"_id":"public/2023/11/15/Basic-orca/index.html","hash":"e560ce5e6594f0305571ed506edf4ebbaf470032","modified":1722919807771},{"_id":"public/2021/12/29/Python-draft/index.html","hash":"a0ce1e274315b1af1b49e2d9d56d42dae4192d3f","modified":1722919807771},{"_id":"public/2021/12/28/How-to-install-CASTEP/index.html","hash":"9d8b180f90100d12fcd3319f43825ae5f76d1d01","modified":1722919807771},{"_id":"public/index.html","hash":"a125728ef14a7aa021ab908987340a5c8110c338","modified":1722919807771},{"_id":"public/archives/index.html","hash":"3b4825c1eaaab68f503292d4db950987b2d12380","modified":1722919807771},{"_id":"public/2021/12/18/Hi/index.html","hash":"6889b395b8e05be69f52285009160d9f5fbaee2a","modified":1722919807771},{"_id":"public/archives/2021/index.html","hash":"f6c9537af58f2cfbdbb687b47028798f1ef7f88b","modified":1722919807771},{"_id":"public/archives/2021/12/index.html","hash":"1a2f1628bc487afeddcbeda38f927127a793b46f","modified":1722919807771},{"_id":"public/archives/2023/index.html","hash":"fda0b9e449f1b6ef2daada6834f305e324d18a65","modified":1722919807771},{"_id":"public/archives/2023/11/index.html","hash":"0ddb810eecd5a98d0e286f0e94a551d7946d5a30","modified":1722919807771},{"_id":"public/categories/Tutorials/index.html","hash":"ac6c0f8dd134d87decbc13783614fd57e39807b5","modified":1722919807771},{"_id":"public/categories/Programming/index.html","hash":"9918364141fd1929c54b9c38a5c908006387f566","modified":1722919807771},{"_id":"public/categories/Tutorials/Orca/index.html","hash":"682a782223ce8e97303a110a2c7e0e894ea43af0","modified":1722919807771},{"_id":"public/categories/Programming/Python/index.html","hash":"5f5caee235cbde553d1927c9cdc7dc9d3b93e971","modified":1722919807771},{"_id":"public/categories/Tutorials/CASTEP/index.html","hash":"b43b34a7185c51d34be53d2fea838f573cb150b8","modified":1722919807771},{"_id":"public/images/V-safari.png","hash":"18ac0aae9081e8d22bdec742bc08fe2ca20436eb","modified":1722919807771},{"_id":"public/images/avatar.jpg","hash":"e3a80bc1a1b144b670f2b39404edbf83f0040c55","modified":1722919807771},{"_id":"public/images/V-apple-touch.png","hash":"394cdd72ef2f2654d45161841e8cb45b5c01d1e3","modified":1722919807771},{"_id":"public/images/V32x32.png","hash":"94f197ff1b47a8c9c7a8ad252d267fbf25b1f29d","modified":1722919807771},{"_id":"public/images/V16x16.png","hash":"cd0d61dd70e646540b13f0f6363b4e332e8d72b5","modified":1722919807771},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1722919807771},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1722919807771},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1722919807771},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1722919807771},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1722919807771},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1722919807771},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1722919807771},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1722919807771},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1722919807771},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1722919807771},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1722919807771},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1722919807771},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1722919807771},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1722919807771},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1722919807771},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1722919807771},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1722919807771},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1722919807771},{"_id":"public/css/main.css","hash":"eb68a87aef8f7b1a3f81d11b86d6c0fd201013a8","modified":1722919807771},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1722919807771},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1722919807771},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1722919807771},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1722919807771},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1722919807771},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1722919807771}],"Category":[{"name":"Tutorials","_id":"clzhxyw620004f8og11mp95du"},{"name":"Programming","_id":"clzhxyw650006f8og2qjzfy14"},{"name":"Orca","parent":"clzhxyw620004f8og11mp95du","_id":"clzhxyw660007f8ogb2jwb08u"},{"name":"Python","parent":"clzhxyw650006f8og2qjzfy14","_id":"clzhxyw660008f8ogdlcyfib4"},{"name":"CASTEP","parent":"clzhxyw620004f8og11mp95du","_id":"clzhxyw6c000ef8oggeho03pv"}],"Data":[],"Page":[{"title":"About","date":"2021-12-17T15:00:00.000Z","_content":"Contact me:\n&emsp;&emsp;<v2misaka@gamil.com>\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-12-18\n---\nContact me:\n&emsp;&emsp;<v2misaka@gamil.com>\n","updated":"2024-08-06T04:27:02.914Z","path":"about/index.html","comments":1,"layout":"page","_id":"clzhxyw5v0000f8ogcki2hd5t","content":"<p>Contact me:   <a href=\"mailto:v2misaka@gamil.com\"\r\nclass=\"email\">v2misaka@gamil.com</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>Contact me:   <a href=\"mailto:v2misaka@gamil.com\"\r\nclass=\"email\">v2misaka@gamil.com</a></p>\r\n"},{"title":"categories","date":"2021-12-17T15:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-18\ntype: \"categories\"\n---\n","updated":"2024-08-06T04:27:02.915Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clzhxyw600002f8ogdz6z63v4","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"Basics of Orca","date":"2023-11-15T06:08:32.000Z","mathjax":true,"_content":"This post is for some basic use of **Orca**。\n\n<!-- more -->\n# Input file\n\n## How to generate an input file\n\nOrca only use one input file: `filename.inp`, which is an ASCII encoded file.\n\n### For Linux\n\nJust simply create `filename.inp`. And make sure the **End of line Sequence** is `LF`.\n\n### For Windows\n\nOrca input file can be generated by **Avogadro** program in Windows, which can be downloaded it from [Orca Forum](https://orcaforum.kofo.mpg.de/app.php/portal).\n\nIf you want to generate input file by yourself, you can create a `filename.txt` file, then save it as `filename.inp`, and remember to change the file type to be `All files`.\n\n**VS Code** is recommended for Windows users, because it enables Linux-like approach to create files.\n\n## Structure of input file\n\nThe common structure for Orca input file is as follows:\n\n```\n! Keywords\n# comments(You can write anything here)\n%input blocks\n*cordinates\n*\n```\n\nFor more detailed information, please refer to **Orca manual** or [this useful web page](https://sites.google.com/site/orcainputlibrary/home?authuser=0).\nAnd there is some input files I saved as examples, which can be found at the [Examples](#example_jump) part.\n\n### Keywords\n\n#### Basic settings\n\nThe keyword lines start with a `!`, which define the job type and the methods we use, for example:\n\n```\n! opt HF 6-31G\n# Job type: geometry optimization\n# Method: Hatree-Fock\n# Basis set: 6-31G\n```\n\nor\n\n```\n! M062X def2-TZVP\n# Job type: single point calculation\n# Method: DFT \n# Exchange-correlation Functional: M062X\n# Basis set: def2-TZVP\n```\n\n>NOTE:\n&emsp;1. You can write as many lines of keywords as you want.\n&emsp;2. If no job type is defined, job type will be `single point calculation`.\n&emsp;3. For DFT, you just need to define the functional, which means that `!B3LYP` and `!DFT B3LYP` are the same.\n\n#### Restart job\n\n`!moread` enables you to read the wavefunction file `*.gbw` from an interrupped job. job. After `!moread`, a `%moinp` block is necessary, eg:\n\n```\n!moread\n%moinp \"lastwork.gbw\"\n```\n\n>NOTE:\n&emsp;The name of `*.gbw` file **must** be different from the file name of current job.\n\n#### Run parallel jobs\n\nThere are two ways to set up parallel jobs:\n\n```\n! PAL4\n```\n\n```\n%pal\n    nprocs 4\nend\n```\n\nBoth of them means using 4 parallel processes.\n>NOTE:\n&emsp;Orca should be called with full path for parallel jobs.\n\n### Input blocks\n\nInput blocks are for detailed settings of the calculation, here I only list two frequently used input blocks.\nFor more details, please refer to the Orca manual.\n\n#### TDDFT settings\n\n```\n%tddft # Settings for TDDFT calculation\n    nroots 5 # How many excited states\n    dosoc true # Calculate SOC\n    tda false # Set Tamm-Dancoff approximation\nend #don't forget end\n```\n\nIf you want to obtain the structures of excited states:\n\n```\n%tddft\n    IRoot 1 #Here means the first excited state\n    IRootMult Singlet # (or Triplet) setting S or T\n    tda false\nend\n```\n\n#### Solvent settings\n\nFirst, a keyword line is needed:\n\n```\n!CPCM(water)\n```\n\nAnd an input block for detailed settings:\n\n```\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n```\n\n### Coordinates input\n\nCoordinates can be directly input as:\n\n```\n*coordinate_type charge multiplicity\n    atom_type coordinates\n    atom_type coordinates\n*\n```\n\nFor example:\n\n```\n*xyz 0 1\nO   0.305   0.240   0.000\nH   0.305   0.702   0.000\nH   0.610   0.463   0.000\n*\n```\n\nYou can also input coordinates from file:\n\n```\n*xyzfile charge multiplicity filename.xyz\n# to input from orca xyz file.\n```\n\nor\n\n```\n*gzmtfile charge multiplicity filename.gzmt\n# to input from Gaussian Z-Matrices files.\n```\n\n>NOTE:\n&emsp;1. After the file name, there **MUST** be a new line to prevent error.\n&emsp;2. Filename should NOT be the same as input file name.\n\n## Settings for B2PLYP functional\n\nIn B2PLYP functional, a given density functional(Becke88) is mixed with HF-exchange in a fraction of $c_x$. The correlation energy of DFT is also mixed with MP2 correlation energy in a fraction of $c_c$. The total exchange correlation energy can be expressed as:\n$$E_{XC}=c_xE_{X}^{HF}+(1-c_x)E_{X}^{DFT}+c_cE_{C}^{MP2}+(1-c_c)E_{C}^{DFT}$$\nThis can be defined in Orca as:\n\n```\n%method\n    ScalHFX = cx\n    ScalDFX = 1-cx\n    ScalGGAC = 1-cc\n    ScalLDAC = 1-cc\n    ScalMP2C = cc\nend\n```\n\nIn order to do B2PLYP calculation by Orca, in addition to normal basis-set, auxiliary basis-set for correlation calculations is neccesary. For example:\n\n```\n! B2PLYP\n! def2-TZVP def2-TZVP/c #define both the basis-set and the auxiliary basis-set.\n```\n\nFor the auxiliary basis-sets available in Orca, please refer to the official manual of Orca.\n\n# How to run Orca\n\nThe command to run Orca is simple:\n\n```\n<path_of_orca>/orca filename.inp > filename.out\n```\n\nAnd you can also add one line in your `.bashrc`:\n\n```\nalias orca=<path_of_orca>/orca\n```\n\nThen you can run orca with:\n\n```\norca filename.inp > filename.out\n```\n\n>NOTE:\n&emsp;Orca **MUST** be called with full path for parallel jobs.\n\n# Output analysis\n\nYou can find all the output in the `.out` file.\n\n## Final energy\n\nFor the final energy, search `FINAL SINGLE POINT ENERGY` in the `.out` file.\n\n## HOMO and LUMO\n\n### Orbital energy\n\nSearch `ORBITAL ENERGIES` in the `.out` file. The second column(`OCC`) means the occupation number of the orbital, and the last column represents the orbital energy with the unit of `eV` For example:\n\n```\n108 2.0000  -0.290681   -7.9098\n109 2.0000  -0.243684   -6.6310\n110 2.0000  -0.241963   -6.5842\n111 0.0000  -0.069260   -1.8847\n112 0.0000  -0.042617   -1.1597\n113 0.0000  0.009858    0.2682\n```\n\nHere, orbital 110 is the HOMO, and orbital 111 is the LUMO.\n\n### Plot the orbital\n\nPlease use the command `orca_plot gbw i` to plot the orbitals. Choose output file type to be `Gaussian cube` to visualize it in `Gaussview`.\n\n## SOC Constant\n\nSearch for `CALCULATED SOCME BETWEEN TRIPLETS AND SINGLETS` in the `.out` file, then you can find the x,y,z components of SOC constant.\n\n# <span id=\"example_jump\">Examples</span>\n\n## Geometry optimization\n\nThis is an example for geometry optimization.\n\n```\n!B3LYP 6-31g(d,p) opt tightscf\n# Functional and basis set. opt means the job type is opt. Default job type is single point calculation.\n\n%pal  # How many cores used\n    nprocs 36\nend\n\n!CPCM(water)  #solvent settings\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n\n# Sinplest way to input cordinates.\n*xyz 0 1    #cordinates_type charge spin\nO 0 0 0\n*\n# Remember the '*' at the end!!!!!\n```\n\n## SOC calculation\n\nThis is an example for calculating SOC matrix.\n\n```\n!M062X 6-31g(d,p) tightscf  # I think 'tightscf' is the default setting.\n\n%tddft  # Settings for TDDFT calculation\nnroots 5    # How many excited states\ndosoc true  # Calculate SOC\ntda false   # Just close it, goes wrong easily.\nend     #don't forget end\n\n%pal\n    nprocs 36   # How many cores for parallel running\nend\n\n!CPCM(water)    # Solvent settings\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n\n#This is another way to input cordinates, remember to have a new line at the end.\n#This file should not be the same name as input file.\n*xyzfile 0 1 opt.xyz\n\n\n*xyz 0 1\nO 0 0 0\n*\n```\n\n## Bash script\n\nThis is the example of bash script to submit Orca calculation jobs for the cluster of UFS Lab.\n\n```\n#!/bin/bash\n\n\n#$ -pe mpi_36 36\n#$ -N Orca_yourname\n#$ -S /bin/bash\n#$ -q all.q@node02\n#$ -V\n#$ -cwd\n\n\necho \"Got $NSLOTS slots.\"\n\nmodule load openmpi-4.1.1\n\n/opt/orca/orca_5_0_3/orca yourjob.inp>yourjob.out\n```\n","source":"_posts/Basic-orca.md","raw":"---\ntitle: Basics of Orca\ndate: 2023-11-15 15:08:32\nmathjax: true\ncategories: \n- Tutorials\n- Orca\n---\nThis post is for some basic use of **Orca**。\n\n<!-- more -->\n# Input file\n\n## How to generate an input file\n\nOrca only use one input file: `filename.inp`, which is an ASCII encoded file.\n\n### For Linux\n\nJust simply create `filename.inp`. And make sure the **End of line Sequence** is `LF`.\n\n### For Windows\n\nOrca input file can be generated by **Avogadro** program in Windows, which can be downloaded it from [Orca Forum](https://orcaforum.kofo.mpg.de/app.php/portal).\n\nIf you want to generate input file by yourself, you can create a `filename.txt` file, then save it as `filename.inp`, and remember to change the file type to be `All files`.\n\n**VS Code** is recommended for Windows users, because it enables Linux-like approach to create files.\n\n## Structure of input file\n\nThe common structure for Orca input file is as follows:\n\n```\n! Keywords\n# comments(You can write anything here)\n%input blocks\n*cordinates\n*\n```\n\nFor more detailed information, please refer to **Orca manual** or [this useful web page](https://sites.google.com/site/orcainputlibrary/home?authuser=0).\nAnd there is some input files I saved as examples, which can be found at the [Examples](#example_jump) part.\n\n### Keywords\n\n#### Basic settings\n\nThe keyword lines start with a `!`, which define the job type and the methods we use, for example:\n\n```\n! opt HF 6-31G\n# Job type: geometry optimization\n# Method: Hatree-Fock\n# Basis set: 6-31G\n```\n\nor\n\n```\n! M062X def2-TZVP\n# Job type: single point calculation\n# Method: DFT \n# Exchange-correlation Functional: M062X\n# Basis set: def2-TZVP\n```\n\n>NOTE:\n&emsp;1. You can write as many lines of keywords as you want.\n&emsp;2. If no job type is defined, job type will be `single point calculation`.\n&emsp;3. For DFT, you just need to define the functional, which means that `!B3LYP` and `!DFT B3LYP` are the same.\n\n#### Restart job\n\n`!moread` enables you to read the wavefunction file `*.gbw` from an interrupped job. job. After `!moread`, a `%moinp` block is necessary, eg:\n\n```\n!moread\n%moinp \"lastwork.gbw\"\n```\n\n>NOTE:\n&emsp;The name of `*.gbw` file **must** be different from the file name of current job.\n\n#### Run parallel jobs\n\nThere are two ways to set up parallel jobs:\n\n```\n! PAL4\n```\n\n```\n%pal\n    nprocs 4\nend\n```\n\nBoth of them means using 4 parallel processes.\n>NOTE:\n&emsp;Orca should be called with full path for parallel jobs.\n\n### Input blocks\n\nInput blocks are for detailed settings of the calculation, here I only list two frequently used input blocks.\nFor more details, please refer to the Orca manual.\n\n#### TDDFT settings\n\n```\n%tddft # Settings for TDDFT calculation\n    nroots 5 # How many excited states\n    dosoc true # Calculate SOC\n    tda false # Set Tamm-Dancoff approximation\nend #don't forget end\n```\n\nIf you want to obtain the structures of excited states:\n\n```\n%tddft\n    IRoot 1 #Here means the first excited state\n    IRootMult Singlet # (or Triplet) setting S or T\n    tda false\nend\n```\n\n#### Solvent settings\n\nFirst, a keyword line is needed:\n\n```\n!CPCM(water)\n```\n\nAnd an input block for detailed settings:\n\n```\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n```\n\n### Coordinates input\n\nCoordinates can be directly input as:\n\n```\n*coordinate_type charge multiplicity\n    atom_type coordinates\n    atom_type coordinates\n*\n```\n\nFor example:\n\n```\n*xyz 0 1\nO   0.305   0.240   0.000\nH   0.305   0.702   0.000\nH   0.610   0.463   0.000\n*\n```\n\nYou can also input coordinates from file:\n\n```\n*xyzfile charge multiplicity filename.xyz\n# to input from orca xyz file.\n```\n\nor\n\n```\n*gzmtfile charge multiplicity filename.gzmt\n# to input from Gaussian Z-Matrices files.\n```\n\n>NOTE:\n&emsp;1. After the file name, there **MUST** be a new line to prevent error.\n&emsp;2. Filename should NOT be the same as input file name.\n\n## Settings for B2PLYP functional\n\nIn B2PLYP functional, a given density functional(Becke88) is mixed with HF-exchange in a fraction of $c_x$. The correlation energy of DFT is also mixed with MP2 correlation energy in a fraction of $c_c$. The total exchange correlation energy can be expressed as:\n$$E_{XC}=c_xE_{X}^{HF}+(1-c_x)E_{X}^{DFT}+c_cE_{C}^{MP2}+(1-c_c)E_{C}^{DFT}$$\nThis can be defined in Orca as:\n\n```\n%method\n    ScalHFX = cx\n    ScalDFX = 1-cx\n    ScalGGAC = 1-cc\n    ScalLDAC = 1-cc\n    ScalMP2C = cc\nend\n```\n\nIn order to do B2PLYP calculation by Orca, in addition to normal basis-set, auxiliary basis-set for correlation calculations is neccesary. For example:\n\n```\n! B2PLYP\n! def2-TZVP def2-TZVP/c #define both the basis-set and the auxiliary basis-set.\n```\n\nFor the auxiliary basis-sets available in Orca, please refer to the official manual of Orca.\n\n# How to run Orca\n\nThe command to run Orca is simple:\n\n```\n<path_of_orca>/orca filename.inp > filename.out\n```\n\nAnd you can also add one line in your `.bashrc`:\n\n```\nalias orca=<path_of_orca>/orca\n```\n\nThen you can run orca with:\n\n```\norca filename.inp > filename.out\n```\n\n>NOTE:\n&emsp;Orca **MUST** be called with full path for parallel jobs.\n\n# Output analysis\n\nYou can find all the output in the `.out` file.\n\n## Final energy\n\nFor the final energy, search `FINAL SINGLE POINT ENERGY` in the `.out` file.\n\n## HOMO and LUMO\n\n### Orbital energy\n\nSearch `ORBITAL ENERGIES` in the `.out` file. The second column(`OCC`) means the occupation number of the orbital, and the last column represents the orbital energy with the unit of `eV` For example:\n\n```\n108 2.0000  -0.290681   -7.9098\n109 2.0000  -0.243684   -6.6310\n110 2.0000  -0.241963   -6.5842\n111 0.0000  -0.069260   -1.8847\n112 0.0000  -0.042617   -1.1597\n113 0.0000  0.009858    0.2682\n```\n\nHere, orbital 110 is the HOMO, and orbital 111 is the LUMO.\n\n### Plot the orbital\n\nPlease use the command `orca_plot gbw i` to plot the orbitals. Choose output file type to be `Gaussian cube` to visualize it in `Gaussview`.\n\n## SOC Constant\n\nSearch for `CALCULATED SOCME BETWEEN TRIPLETS AND SINGLETS` in the `.out` file, then you can find the x,y,z components of SOC constant.\n\n# <span id=\"example_jump\">Examples</span>\n\n## Geometry optimization\n\nThis is an example for geometry optimization.\n\n```\n!B3LYP 6-31g(d,p) opt tightscf\n# Functional and basis set. opt means the job type is opt. Default job type is single point calculation.\n\n%pal  # How many cores used\n    nprocs 36\nend\n\n!CPCM(water)  #solvent settings\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n\n# Sinplest way to input cordinates.\n*xyz 0 1    #cordinates_type charge spin\nO 0 0 0\n*\n# Remember the '*' at the end!!!!!\n```\n\n## SOC calculation\n\nThis is an example for calculating SOC matrix.\n\n```\n!M062X 6-31g(d,p) tightscf  # I think 'tightscf' is the default setting.\n\n%tddft  # Settings for TDDFT calculation\nnroots 5    # How many excited states\ndosoc true  # Calculate SOC\ntda false   # Just close it, goes wrong easily.\nend     #don't forget end\n\n%pal\n    nprocs 36   # How many cores for parallel running\nend\n\n!CPCM(water)    # Solvent settings\n%cpcm\n    smd true\n    SMDsolvent \"water\"\nend\n\n#This is another way to input cordinates, remember to have a new line at the end.\n#This file should not be the same name as input file.\n*xyzfile 0 1 opt.xyz\n\n\n*xyz 0 1\nO 0 0 0\n*\n```\n\n## Bash script\n\nThis is the example of bash script to submit Orca calculation jobs for the cluster of UFS Lab.\n\n```\n#!/bin/bash\n\n\n#$ -pe mpi_36 36\n#$ -N Orca_yourname\n#$ -S /bin/bash\n#$ -q all.q@node02\n#$ -V\n#$ -cwd\n\n\necho \"Got $NSLOTS slots.\"\n\nmodule load openmpi-4.1.1\n\n/opt/orca/orca_5_0_3/orca yourjob.inp>yourjob.out\n```\n","slug":"Basic-orca","published":1,"updated":"2024-08-06T04:27:02.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzhxyw5y0001f8og0xnw46rg","content":"<p>This post is for some basic use of <strong>Orca</strong>。</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"input-file\">Input file</h1>\r\n<h2 id=\"how-to-generate-an-input-file\">How to generate an input\r\nfile</h2>\r\n<p>Orca only use one input file: <code>filename.inp</code>, which is an\r\nASCII encoded file.</p>\r\n<h3 id=\"for-linux\">For Linux</h3>\r\n<p>Just simply create <code>filename.inp</code>. And make sure the\r\n<strong>End of line Sequence</strong> is <code>LF</code>.</p>\r\n<h3 id=\"for-windows\">For Windows</h3>\r\n<p>Orca input file can be generated by <strong>Avogadro</strong> program\r\nin Windows, which can be downloaded it from <a\r\nhref=\"https://orcaforum.kofo.mpg.de/app.php/portal\">Orca Forum</a>.</p>\r\n<p>If you want to generate input file by yourself, you can create a\r\n<code>filename.txt</code> file, then save it as\r\n<code>filename.inp</code>, and remember to change the file type to be\r\n<code>All files</code>.</p>\r\n<p><strong>VS Code</strong> is recommended for Windows users, because it\r\nenables Linux-like approach to create files.</p>\r\n<h2 id=\"structure-of-input-file\">Structure of input file</h2>\r\n<p>The common structure for Orca input file is as follows:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Keywords</span><br><span class=\"line\"># comments(You can write anything here)</span><br><span class=\"line\">%input blocks</span><br><span class=\"line\">*cordinates</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>For more detailed information, please refer to <strong>Orca\r\nmanual</strong> or <a\r\nhref=\"https://sites.google.com/site/orcainputlibrary/home?authuser=0\">this\r\nuseful web page</a>. And there is some input files I saved as examples,\r\nwhich can be found at the <a href=\"#example_jump\">Examples</a> part.</p>\r\n<h3 id=\"keywords\">Keywords</h3>\r\n<h4 id=\"basic-settings\">Basic settings</h4>\r\n<p>The keyword lines start with a <code>!</code>, which define the job\r\ntype and the methods we use, for example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! opt HF 6-31G</span><br><span class=\"line\"># Job type: geometry optimization</span><br><span class=\"line\"># Method: Hatree-Fock</span><br><span class=\"line\"># Basis set: 6-31G</span><br></pre></td></tr></table></figure>\r\n<p>or</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! M062X def2-TZVP</span><br><span class=\"line\"># Job type: single point calculation</span><br><span class=\"line\"># Method: DFT </span><br><span class=\"line\"># Exchange-correlation Functional: M062X</span><br><span class=\"line\"># Basis set: def2-TZVP</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  1. You can write as many lines of keywords as you want.  2. If\r\nno job type is defined, job type will be\r\n<code>single point calculation</code>.  3. For DFT, you just need to\r\ndefine the functional, which means that <code>!B3LYP</code> and\r\n<code>!DFT B3LYP</code> are the same.</p>\r\n</blockquote>\r\n<h4 id=\"restart-job\">Restart job</h4>\r\n<p><code>!moread</code> enables you to read the wavefunction file\r\n<code>*.gbw</code> from an interrupped job. job. After\r\n<code>!moread</code>, a <code>%moinp</code> block is necessary, eg:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!moread</span><br><span class=\"line\">%moinp &quot;lastwork.gbw&quot;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  The name of <code>*.gbw</code> file <strong>must</strong> be\r\ndifferent from the file name of current job.</p>\r\n</blockquote>\r\n<h4 id=\"run-parallel-jobs\">Run parallel jobs</h4>\r\n<p>There are two ways to set up parallel jobs:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! PAL4</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%pal</span><br><span class=\"line\">    nprocs 4</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<p>Both of them means using 4 parallel processes. &gt;NOTE:  Orca should\r\nbe called with full path for parallel jobs.</p>\r\n<h3 id=\"input-blocks\">Input blocks</h3>\r\n<p>Input blocks are for detailed settings of the calculation, here I\r\nonly list two frequently used input blocks. For more details, please\r\nrefer to the Orca manual.</p>\r\n<h4 id=\"tddft-settings\">TDDFT settings</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%tddft # Settings for TDDFT calculation</span><br><span class=\"line\">    nroots 5 # How many excited states</span><br><span class=\"line\">    dosoc true # Calculate SOC</span><br><span class=\"line\">    tda false # Set Tamm-Dancoff approximation</span><br><span class=\"line\">end #don&#x27;t forget end</span><br></pre></td></tr></table></figure>\r\n<p>If you want to obtain the structures of excited states:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%tddft</span><br><span class=\"line\">    IRoot 1 #Here means the first excited state</span><br><span class=\"line\">    IRootMult Singlet # (or Triplet) setting S or T</span><br><span class=\"line\">    tda false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"solvent-settings\">Solvent settings</h4>\r\n<p>First, a keyword line is needed:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!CPCM(water)</span><br></pre></td></tr></table></figure>\r\n<p>And an input block for detailed settings:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"coordinates-input\">Coordinates input</h3>\r\n<p>Coordinates can be directly input as:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*coordinate_type charge multiplicity</span><br><span class=\"line\">    atom_type coordinates</span><br><span class=\"line\">    atom_type coordinates</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*xyz 0 1</span><br><span class=\"line\">O   0.305   0.240   0.000</span><br><span class=\"line\">H   0.305   0.702   0.000</span><br><span class=\"line\">H   0.610   0.463   0.000</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>You can also input coordinates from file:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*xyzfile charge multiplicity filename.xyz</span><br><span class=\"line\"># to input from orca xyz file.</span><br></pre></td></tr></table></figure>\r\n<p>or</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*gzmtfile charge multiplicity filename.gzmt</span><br><span class=\"line\"># to input from Gaussian Z-Matrices files.</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  1. After the file name, there <strong>MUST</strong> be a new\r\nline to prevent error.  2. Filename should NOT be the same as input file\r\nname.</p>\r\n</blockquote>\r\n<h2 id=\"settings-for-b2plyp-functional\">Settings for B2PLYP\r\nfunctional</h2>\r\n<p>In B2PLYP functional, a given density functional(Becke88) is mixed\r\nwith HF-exchange in a fraction of <span\r\nclass=\"math inline\">\\(c_x\\)</span>. The correlation energy of DFT is\r\nalso mixed with MP2 correlation energy in a fraction of <span\r\nclass=\"math inline\">\\(c_c\\)</span>. The total exchange correlation\r\nenergy can be expressed as: <span\r\nclass=\"math display\">\\[E_{XC}=c_xE_{X}^{HF}+(1-c_x)E_{X}^{DFT}+c_cE_{C}^{MP2}+(1-c_c)E_{C}^{DFT}\\]</span>\r\nThis can be defined in Orca as:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%method</span><br><span class=\"line\">    ScalHFX = cx</span><br><span class=\"line\">    ScalDFX = 1-cx</span><br><span class=\"line\">    ScalGGAC = 1-cc</span><br><span class=\"line\">    ScalLDAC = 1-cc</span><br><span class=\"line\">    ScalMP2C = cc</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<p>In order to do B2PLYP calculation by Orca, in addition to normal\r\nbasis-set, auxiliary basis-set for correlation calculations is\r\nneccesary. For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! B2PLYP</span><br><span class=\"line\">! def2-TZVP def2-TZVP/c #define both the basis-set and the auxiliary basis-set.</span><br></pre></td></tr></table></figure>\r\n<p>For the auxiliary basis-sets available in Orca, please refer to the\r\nofficial manual of Orca.</p>\r\n<h1 id=\"how-to-run-orca\">How to run Orca</h1>\r\n<p>The command to run Orca is simple:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;path_of_orca&gt;/orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>\r\n<p>And you can also add one line in your <code>.bashrc</code>:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias orca=&lt;path_of_orca&gt;/orca</span><br></pre></td></tr></table></figure>\r\n<p>Then you can run orca with:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  Orca <strong>MUST</strong> be called with full path for\r\nparallel jobs.</p>\r\n</blockquote>\r\n<h1 id=\"output-analysis\">Output analysis</h1>\r\n<p>You can find all the output in the <code>.out</code> file.</p>\r\n<h2 id=\"final-energy\">Final energy</h2>\r\n<p>For the final energy, search <code>FINAL SINGLE POINT ENERGY</code>\r\nin the <code>.out</code> file.</p>\r\n<h2 id=\"homo-and-lumo\">HOMO and LUMO</h2>\r\n<h3 id=\"orbital-energy\">Orbital energy</h3>\r\n<p>Search <code>ORBITAL ENERGIES</code> in the <code>.out</code> file.\r\nThe second column(<code>OCC</code>) means the occupation number of the\r\norbital, and the last column represents the orbital energy with the unit\r\nof <code>eV</code> For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">108 2.0000  -0.290681   -7.9098</span><br><span class=\"line\">109 2.0000  -0.243684   -6.6310</span><br><span class=\"line\">110 2.0000  -0.241963   -6.5842</span><br><span class=\"line\">111 0.0000  -0.069260   -1.8847</span><br><span class=\"line\">112 0.0000  -0.042617   -1.1597</span><br><span class=\"line\">113 0.0000  0.009858    0.2682</span><br></pre></td></tr></table></figure>\r\n<p>Here, orbital 110 is the HOMO, and orbital 111 is the LUMO.</p>\r\n<h3 id=\"plot-the-orbital\">Plot the orbital</h3>\r\n<p>Please use the command <code>orca_plot gbw i</code> to plot the\r\norbitals. Choose output file type to be <code>Gaussian cube</code> to\r\nvisualize it in <code>Gaussview</code>.</p>\r\n<h2 id=\"soc-constant\">SOC Constant</h2>\r\n<p>Search for\r\n<code>CALCULATED SOCME BETWEEN TRIPLETS AND SINGLETS</code> in the\r\n<code>.out</code> file, then you can find the x,y,z components of SOC\r\nconstant.</p>\r\n<h1 id=\"examples\"><span id=\"example_jump\">Examples</span></h1>\r\n<h2 id=\"geometry-optimization\">Geometry optimization</h2>\r\n<p>This is an example for geometry optimization.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!B3LYP 6-31g(d,p) opt tightscf</span><br><span class=\"line\"># Functional and basis set. opt means the job type is opt. Default job type is single point calculation.</span><br><span class=\"line\"></span><br><span class=\"line\">%pal  # How many cores used</span><br><span class=\"line\">    nprocs 36</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">!CPCM(water)  #solvent settings</span><br><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"># Sinplest way to input cordinates.</span><br><span class=\"line\">*xyz 0 1    #cordinates_type charge spin</span><br><span class=\"line\">O 0 0 0</span><br><span class=\"line\">*</span><br><span class=\"line\"># Remember the &#x27;*&#x27; at the end!!!!!</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"soc-calculation\">SOC calculation</h2>\r\n<p>This is an example for calculating SOC matrix.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!M062X 6-31g(d,p) tightscf  # I think &#x27;tightscf&#x27; is the default setting.</span><br><span class=\"line\"></span><br><span class=\"line\">%tddft  # Settings for TDDFT calculation</span><br><span class=\"line\">nroots 5    # How many excited states</span><br><span class=\"line\">dosoc true  # Calculate SOC</span><br><span class=\"line\">tda false   # Just close it, goes wrong easily.</span><br><span class=\"line\">end     #don&#x27;t forget end</span><br><span class=\"line\"></span><br><span class=\"line\">%pal</span><br><span class=\"line\">    nprocs 36   # How many cores for parallel running</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">!CPCM(water)    # Solvent settings</span><br><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">#This is another way to input cordinates, remember to have a new line at the end.</span><br><span class=\"line\">#This file should not be the same name as input file.</span><br><span class=\"line\">*xyzfile 0 1 opt.xyz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*xyz 0 1</span><br><span class=\"line\">O 0 0 0</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"bash-script\">Bash script</h2>\r\n<p>This is the example of bash script to submit Orca calculation jobs\r\nfor the cluster of UFS Lab.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#$ -pe mpi_36 36</span><br><span class=\"line\">#$ -N Orca_yourname</span><br><span class=\"line\">#$ -S /bin/bash</span><br><span class=\"line\">#$ -q all.q@node02</span><br><span class=\"line\">#$ -V</span><br><span class=\"line\">#$ -cwd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Got $NSLOTS slots.&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">module load openmpi-4.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/orca/orca_5_0_3/orca yourjob.inp&gt;yourjob.out</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>This post is for some basic use of <strong>Orca</strong>。</p>","more":"<h1 id=\"input-file\">Input file</h1>\r\n<h2 id=\"how-to-generate-an-input-file\">How to generate an input\r\nfile</h2>\r\n<p>Orca only use one input file: <code>filename.inp</code>, which is an\r\nASCII encoded file.</p>\r\n<h3 id=\"for-linux\">For Linux</h3>\r\n<p>Just simply create <code>filename.inp</code>. And make sure the\r\n<strong>End of line Sequence</strong> is <code>LF</code>.</p>\r\n<h3 id=\"for-windows\">For Windows</h3>\r\n<p>Orca input file can be generated by <strong>Avogadro</strong> program\r\nin Windows, which can be downloaded it from <a\r\nhref=\"https://orcaforum.kofo.mpg.de/app.php/portal\">Orca Forum</a>.</p>\r\n<p>If you want to generate input file by yourself, you can create a\r\n<code>filename.txt</code> file, then save it as\r\n<code>filename.inp</code>, and remember to change the file type to be\r\n<code>All files</code>.</p>\r\n<p><strong>VS Code</strong> is recommended for Windows users, because it\r\nenables Linux-like approach to create files.</p>\r\n<h2 id=\"structure-of-input-file\">Structure of input file</h2>\r\n<p>The common structure for Orca input file is as follows:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Keywords</span><br><span class=\"line\"># comments(You can write anything here)</span><br><span class=\"line\">%input blocks</span><br><span class=\"line\">*cordinates</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>For more detailed information, please refer to <strong>Orca\r\nmanual</strong> or <a\r\nhref=\"https://sites.google.com/site/orcainputlibrary/home?authuser=0\">this\r\nuseful web page</a>. And there is some input files I saved as examples,\r\nwhich can be found at the <a href=\"#example_jump\">Examples</a> part.</p>\r\n<h3 id=\"keywords\">Keywords</h3>\r\n<h4 id=\"basic-settings\">Basic settings</h4>\r\n<p>The keyword lines start with a <code>!</code>, which define the job\r\ntype and the methods we use, for example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! opt HF 6-31G</span><br><span class=\"line\"># Job type: geometry optimization</span><br><span class=\"line\"># Method: Hatree-Fock</span><br><span class=\"line\"># Basis set: 6-31G</span><br></pre></td></tr></table></figure>\r\n<p>or</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! M062X def2-TZVP</span><br><span class=\"line\"># Job type: single point calculation</span><br><span class=\"line\"># Method: DFT </span><br><span class=\"line\"># Exchange-correlation Functional: M062X</span><br><span class=\"line\"># Basis set: def2-TZVP</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  1. You can write as many lines of keywords as you want.  2. If\r\nno job type is defined, job type will be\r\n<code>single point calculation</code>.  3. For DFT, you just need to\r\ndefine the functional, which means that <code>!B3LYP</code> and\r\n<code>!DFT B3LYP</code> are the same.</p>\r\n</blockquote>\r\n<h4 id=\"restart-job\">Restart job</h4>\r\n<p><code>!moread</code> enables you to read the wavefunction file\r\n<code>*.gbw</code> from an interrupped job. job. After\r\n<code>!moread</code>, a <code>%moinp</code> block is necessary, eg:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!moread</span><br><span class=\"line\">%moinp &quot;lastwork.gbw&quot;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  The name of <code>*.gbw</code> file <strong>must</strong> be\r\ndifferent from the file name of current job.</p>\r\n</blockquote>\r\n<h4 id=\"run-parallel-jobs\">Run parallel jobs</h4>\r\n<p>There are two ways to set up parallel jobs:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! PAL4</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%pal</span><br><span class=\"line\">    nprocs 4</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<p>Both of them means using 4 parallel processes. &gt;NOTE:  Orca should\r\nbe called with full path for parallel jobs.</p>\r\n<h3 id=\"input-blocks\">Input blocks</h3>\r\n<p>Input blocks are for detailed settings of the calculation, here I\r\nonly list two frequently used input blocks. For more details, please\r\nrefer to the Orca manual.</p>\r\n<h4 id=\"tddft-settings\">TDDFT settings</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%tddft # Settings for TDDFT calculation</span><br><span class=\"line\">    nroots 5 # How many excited states</span><br><span class=\"line\">    dosoc true # Calculate SOC</span><br><span class=\"line\">    tda false # Set Tamm-Dancoff approximation</span><br><span class=\"line\">end #don&#x27;t forget end</span><br></pre></td></tr></table></figure>\r\n<p>If you want to obtain the structures of excited states:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%tddft</span><br><span class=\"line\">    IRoot 1 #Here means the first excited state</span><br><span class=\"line\">    IRootMult Singlet # (or Triplet) setting S or T</span><br><span class=\"line\">    tda false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"solvent-settings\">Solvent settings</h4>\r\n<p>First, a keyword line is needed:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!CPCM(water)</span><br></pre></td></tr></table></figure>\r\n<p>And an input block for detailed settings:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"coordinates-input\">Coordinates input</h3>\r\n<p>Coordinates can be directly input as:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*coordinate_type charge multiplicity</span><br><span class=\"line\">    atom_type coordinates</span><br><span class=\"line\">    atom_type coordinates</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*xyz 0 1</span><br><span class=\"line\">O   0.305   0.240   0.000</span><br><span class=\"line\">H   0.305   0.702   0.000</span><br><span class=\"line\">H   0.610   0.463   0.000</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<p>You can also input coordinates from file:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*xyzfile charge multiplicity filename.xyz</span><br><span class=\"line\"># to input from orca xyz file.</span><br></pre></td></tr></table></figure>\r\n<p>or</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*gzmtfile charge multiplicity filename.gzmt</span><br><span class=\"line\"># to input from Gaussian Z-Matrices files.</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  1. After the file name, there <strong>MUST</strong> be a new\r\nline to prevent error.  2. Filename should NOT be the same as input file\r\nname.</p>\r\n</blockquote>\r\n<h2 id=\"settings-for-b2plyp-functional\">Settings for B2PLYP\r\nfunctional</h2>\r\n<p>In B2PLYP functional, a given density functional(Becke88) is mixed\r\nwith HF-exchange in a fraction of <span\r\nclass=\"math inline\">\\(c_x\\)</span>. The correlation energy of DFT is\r\nalso mixed with MP2 correlation energy in a fraction of <span\r\nclass=\"math inline\">\\(c_c\\)</span>. The total exchange correlation\r\nenergy can be expressed as: <span\r\nclass=\"math display\">\\[E_{XC}=c_xE_{X}^{HF}+(1-c_x)E_{X}^{DFT}+c_cE_{C}^{MP2}+(1-c_c)E_{C}^{DFT}\\]</span>\r\nThis can be defined in Orca as:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%method</span><br><span class=\"line\">    ScalHFX = cx</span><br><span class=\"line\">    ScalDFX = 1-cx</span><br><span class=\"line\">    ScalGGAC = 1-cc</span><br><span class=\"line\">    ScalLDAC = 1-cc</span><br><span class=\"line\">    ScalMP2C = cc</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n<p>In order to do B2PLYP calculation by Orca, in addition to normal\r\nbasis-set, auxiliary basis-set for correlation calculations is\r\nneccesary. For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! B2PLYP</span><br><span class=\"line\">! def2-TZVP def2-TZVP/c #define both the basis-set and the auxiliary basis-set.</span><br></pre></td></tr></table></figure>\r\n<p>For the auxiliary basis-sets available in Orca, please refer to the\r\nofficial manual of Orca.</p>\r\n<h1 id=\"how-to-run-orca\">How to run Orca</h1>\r\n<p>The command to run Orca is simple:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;path_of_orca&gt;/orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>\r\n<p>And you can also add one line in your <code>.bashrc</code>:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias orca=&lt;path_of_orca&gt;/orca</span><br></pre></td></tr></table></figure>\r\n<p>Then you can run orca with:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orca filename.inp &gt; filename.out</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>NOTE:  Orca <strong>MUST</strong> be called with full path for\r\nparallel jobs.</p>\r\n</blockquote>\r\n<h1 id=\"output-analysis\">Output analysis</h1>\r\n<p>You can find all the output in the <code>.out</code> file.</p>\r\n<h2 id=\"final-energy\">Final energy</h2>\r\n<p>For the final energy, search <code>FINAL SINGLE POINT ENERGY</code>\r\nin the <code>.out</code> file.</p>\r\n<h2 id=\"homo-and-lumo\">HOMO and LUMO</h2>\r\n<h3 id=\"orbital-energy\">Orbital energy</h3>\r\n<p>Search <code>ORBITAL ENERGIES</code> in the <code>.out</code> file.\r\nThe second column(<code>OCC</code>) means the occupation number of the\r\norbital, and the last column represents the orbital energy with the unit\r\nof <code>eV</code> For example:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">108 2.0000  -0.290681   -7.9098</span><br><span class=\"line\">109 2.0000  -0.243684   -6.6310</span><br><span class=\"line\">110 2.0000  -0.241963   -6.5842</span><br><span class=\"line\">111 0.0000  -0.069260   -1.8847</span><br><span class=\"line\">112 0.0000  -0.042617   -1.1597</span><br><span class=\"line\">113 0.0000  0.009858    0.2682</span><br></pre></td></tr></table></figure>\r\n<p>Here, orbital 110 is the HOMO, and orbital 111 is the LUMO.</p>\r\n<h3 id=\"plot-the-orbital\">Plot the orbital</h3>\r\n<p>Please use the command <code>orca_plot gbw i</code> to plot the\r\norbitals. Choose output file type to be <code>Gaussian cube</code> to\r\nvisualize it in <code>Gaussview</code>.</p>\r\n<h2 id=\"soc-constant\">SOC Constant</h2>\r\n<p>Search for\r\n<code>CALCULATED SOCME BETWEEN TRIPLETS AND SINGLETS</code> in the\r\n<code>.out</code> file, then you can find the x,y,z components of SOC\r\nconstant.</p>\r\n<h1 id=\"examples\"><span id=\"example_jump\">Examples</span></h1>\r\n<h2 id=\"geometry-optimization\">Geometry optimization</h2>\r\n<p>This is an example for geometry optimization.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!B3LYP 6-31g(d,p) opt tightscf</span><br><span class=\"line\"># Functional and basis set. opt means the job type is opt. Default job type is single point calculation.</span><br><span class=\"line\"></span><br><span class=\"line\">%pal  # How many cores used</span><br><span class=\"line\">    nprocs 36</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">!CPCM(water)  #solvent settings</span><br><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"># Sinplest way to input cordinates.</span><br><span class=\"line\">*xyz 0 1    #cordinates_type charge spin</span><br><span class=\"line\">O 0 0 0</span><br><span class=\"line\">*</span><br><span class=\"line\"># Remember the &#x27;*&#x27; at the end!!!!!</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"soc-calculation\">SOC calculation</h2>\r\n<p>This is an example for calculating SOC matrix.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!M062X 6-31g(d,p) tightscf  # I think &#x27;tightscf&#x27; is the default setting.</span><br><span class=\"line\"></span><br><span class=\"line\">%tddft  # Settings for TDDFT calculation</span><br><span class=\"line\">nroots 5    # How many excited states</span><br><span class=\"line\">dosoc true  # Calculate SOC</span><br><span class=\"line\">tda false   # Just close it, goes wrong easily.</span><br><span class=\"line\">end     #don&#x27;t forget end</span><br><span class=\"line\"></span><br><span class=\"line\">%pal</span><br><span class=\"line\">    nprocs 36   # How many cores for parallel running</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">!CPCM(water)    # Solvent settings</span><br><span class=\"line\">%cpcm</span><br><span class=\"line\">    smd true</span><br><span class=\"line\">    SMDsolvent &quot;water&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">#This is another way to input cordinates, remember to have a new line at the end.</span><br><span class=\"line\">#This file should not be the same name as input file.</span><br><span class=\"line\">*xyzfile 0 1 opt.xyz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*xyz 0 1</span><br><span class=\"line\">O 0 0 0</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"bash-script\">Bash script</h2>\r\n<p>This is the example of bash script to submit Orca calculation jobs\r\nfor the cluster of UFS Lab.</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#$ -pe mpi_36 36</span><br><span class=\"line\">#$ -N Orca_yourname</span><br><span class=\"line\">#$ -S /bin/bash</span><br><span class=\"line\">#$ -q all.q@node02</span><br><span class=\"line\">#$ -V</span><br><span class=\"line\">#$ -cwd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Got $NSLOTS slots.&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">module load openmpi-4.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/orca/orca_5_0_3/orca yourjob.inp&gt;yourjob.out</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Python note -really basic","date":"2021-12-29T12:29:12.000Z","updated":"2021-12-29T12:29:12.000Z","_content":"Here are my notes on learning Python.  \nHope that helps.\n\n***Continuously updating.***\n\n<!-- more -->\n# Primitive Types\n\n## Number\n\n```python\nprint(10 + 3)\nprint(10 - 3)\nprint(10 * 3)\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\nprint(10 ** 3)\n\nprint(abs(-2.9))\nprint(round(-2.9))\n```\n\n    13\n    7\n    30\n    3.3333333333333335\n    3\n    1\n    1000\n    2.9\n    -3\n\n## String\n\n```python\ncourse = \"   Python programming \"  # Notice the blank\n# Escape characters: \\n \\\" \\\\\nprint(len(course))\n```\n\n    22\n\n### methods for string\n\n```python\nprint(course.upper())\nprint(course.lower())\nprint(course.title())\n\nprint(course.strip())\nprint(course.rstrip()+\"a\")\nprint(course.lstrip()+\"a\")\n\n# notice the difference\nprint(course.find(\"pro\"))\nprint(course.find(\"Pro\"))\n\nprint(\"pro\" in course)  # Judgment statement\nprint(\"sdif\" not in course)\n\nprint(course.replace(\"p\", \"j\"))\n\n```\n\n       PYTHON PROGRAMMING \n       python programming \n       Python Programming \n    Python programming\n       Python programminga\n    Python programming a\n    10\n    -1\n    True\n    True\n       Python jrogramming \n\n### operations of string\n\n```python\nyou = \"xixi\"\nme = \"xuxu\"\nyou_plus_me = you + me\nyou_love_me = f\"{you} love {me} {500+10*2}\"\nprint(you_plus_me)\nprint(you_love_me)\n```\n\n    xixixuxu\n    xixi love xuxu 520\n\n## Boolean\n\n```python\nprint(bool(0))\nprint(int(False))\n```\n\n    False\n    0\n\n## Input statement\n\n```python\nx = input(\"please input x:\")\nprint(\"Here I inputed\", x ,\"as an example\")\nprint(type(x))\n# as a result, the type of the input character needs to be converted before it can be operated\nprint(int(x)+2)\nprint(type(x))\n\n```\n\n    Here I inputed 222 as an example\n    <class 'str'>\n    224\n    <class 'str'>\n\n# Control Flow\n\n## Conditional Statements\n\n### Comparison\n\ncomparison operators: > < >= <= == !=\n\n```python\nprint(ord(\"B\"))  # show the ASCII value\n```\n\n    66\n\n#### Comparison Statements\n\n```python\na = 2\nb = 18\nif a == b:\n    print(\"a = b\")\nif a < b:\n    print(\"a < b\")\n```\n\n    a < b\n\n```python\n# a more simpler statement\nage = 25\nmessage = \"Eligible\" if age > 18 else \"Not Eligible\"\nprint(message)\nif 18 <= age < 65: \n    print(\"Eligible\")\n```\n\n    Eligible\n    Eligible\n\n##### compare: 'if' ; 'elif'\n\n```python\na = 2\nb = 18\nif a == b:\n    print(\"a = b\")\nif a < b:\n    print(\"a < b\")\nelif (b-a) > 5:\n    print(\"a<<b\")  # 'elif' won't work when former 'if' works.\nif (b-a) > 5:\n    print(\"a<<b\")  # 'if' will work nomatter former 'if' works or not.\nelse:\n    print(\"a > b\")\nprint(\"done\")\n\n```\n\n    a < b\n    a<<b\n    done\n\n### Logical\n\nLogical operators: and; or; not\n\n```python\nhigh_income = False\ngood_credit = True\n\nif high_income and good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\nif high_income or good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\nif (not high_income) and good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\n```\n\n    Not Eligible\n    Eligible\n    Eligible\n\n## Loop Statements\n\n### for\n\n```python\nfor number in range(3):\n    print(\"number =\", number)\nprint(number)\nfor number in range(1, 4):\n    print(\"number =\", number)\nfor number in range(1, 10, 2):\n    print(\"number =\", number)\n```\n\n    number = 0\n    number = 1\n    number = 2\n    2\n    number = 1\n    number = 2\n    number = 3\n    number = 1\n    number = 3\n    number = 5\n    number = 7\n    number = 9\n\n#### for...else\n\n```python\nfor number in range(1, 5):\n    print(\"number =\", number)\n    if number == 3:\n        print(\"Fail\")\n        break  # to jump out of the loop\nelse:\n    print(\"Success\")  # only when 'for' completed without jump out\n\nfor number in range(1, 5):\n    print(\"number =\", number)\nelse:\n    print(\"Success\")\n```\n\n    number = 1\n    number = 2\n    number = 3\n    Fail\n    number = 1\n    number = 2\n    number = 3\n    number = 4\n    Success\n\n### Iterable\n\n```python\nprint(type(range(3)))  # range\nfor x in range(3):\n    print(x)\n\nprint(type(\"I love xixi\"))  # string\nfor x in \"I love xixi\":\n    print(x)\n\nprint(type([1, 2, 3, 145]))  # list\nfor x in [1, 2, 3, 145]:\n    print(x)\n\n```\n\n    <class 'range'>\n    0\n    1\n    2\n    <class 'str'>\n    I\n     \n    l\n    o\n    v\n    e\n     \n    x\n    i\n    x\n    i\n    <class 'list'>\n    1\n    2\n    3\n    145\n\n### while\n\n```python\nnumber = 100\nwhile number > 0:\n    print(number)\n    number //= 2\n```\n\n    100\n    50\n    25\n    12\n    6\n    3\n    1\n\n# Functions\n\n## Definition\n\n```python\ndef greet(first_name=\"xi\", last_name=\"Xi\"):  # you can set default values for formal parameters.\n    print(f\"Hi {last_name}{first_name}\")  # Variables in the definition of a function are all local.\n\n\n# 2 empty lines after difinition\n```\n\n## Calling\n\n```python\ngreet()  # the parameter will use the default value\ngreet(\"xu\", \"Xu\")\ngreet(first_name=\"xu\", last_name=\"Xu\")\n```\n\n    Hi Xixi\n    Hi Xuxu\n    Hi Xuxu\n\n## Types of functions\n\n### 1- Perform a task\n\n```python\ndef task():\n    print(\"I performed a task!!\")\n\n\ntask()\n```\n\n    I performed a task!!\n\n### 2- Return a value\n\n```python\ndef value():\n    return f\"I returned a value!!\"\n\n\nmessage = value()\nprint(message)\n\nprint(task())\nprint(value())\n```\n\n    I returned a value!!\n    I performed a task!!\n    None\n    I returned a value!!\n","source":"_posts/Python-draft.md","raw":"---\nlayout:\n  - post\ntitle: Python note -really basic\ndate: 2021-12-29 21:29:12\nupdated: 2021-12-29 21:29:12\ncategories:\n- Programming\n- Python\n---\nHere are my notes on learning Python.  \nHope that helps.\n\n***Continuously updating.***\n\n<!-- more -->\n# Primitive Types\n\n## Number\n\n```python\nprint(10 + 3)\nprint(10 - 3)\nprint(10 * 3)\nprint(10 / 3)\nprint(10 // 3)\nprint(10 % 3)\nprint(10 ** 3)\n\nprint(abs(-2.9))\nprint(round(-2.9))\n```\n\n    13\n    7\n    30\n    3.3333333333333335\n    3\n    1\n    1000\n    2.9\n    -3\n\n## String\n\n```python\ncourse = \"   Python programming \"  # Notice the blank\n# Escape characters: \\n \\\" \\\\\nprint(len(course))\n```\n\n    22\n\n### methods for string\n\n```python\nprint(course.upper())\nprint(course.lower())\nprint(course.title())\n\nprint(course.strip())\nprint(course.rstrip()+\"a\")\nprint(course.lstrip()+\"a\")\n\n# notice the difference\nprint(course.find(\"pro\"))\nprint(course.find(\"Pro\"))\n\nprint(\"pro\" in course)  # Judgment statement\nprint(\"sdif\" not in course)\n\nprint(course.replace(\"p\", \"j\"))\n\n```\n\n       PYTHON PROGRAMMING \n       python programming \n       Python Programming \n    Python programming\n       Python programminga\n    Python programming a\n    10\n    -1\n    True\n    True\n       Python jrogramming \n\n### operations of string\n\n```python\nyou = \"xixi\"\nme = \"xuxu\"\nyou_plus_me = you + me\nyou_love_me = f\"{you} love {me} {500+10*2}\"\nprint(you_plus_me)\nprint(you_love_me)\n```\n\n    xixixuxu\n    xixi love xuxu 520\n\n## Boolean\n\n```python\nprint(bool(0))\nprint(int(False))\n```\n\n    False\n    0\n\n## Input statement\n\n```python\nx = input(\"please input x:\")\nprint(\"Here I inputed\", x ,\"as an example\")\nprint(type(x))\n# as a result, the type of the input character needs to be converted before it can be operated\nprint(int(x)+2)\nprint(type(x))\n\n```\n\n    Here I inputed 222 as an example\n    <class 'str'>\n    224\n    <class 'str'>\n\n# Control Flow\n\n## Conditional Statements\n\n### Comparison\n\ncomparison operators: > < >= <= == !=\n\n```python\nprint(ord(\"B\"))  # show the ASCII value\n```\n\n    66\n\n#### Comparison Statements\n\n```python\na = 2\nb = 18\nif a == b:\n    print(\"a = b\")\nif a < b:\n    print(\"a < b\")\n```\n\n    a < b\n\n```python\n# a more simpler statement\nage = 25\nmessage = \"Eligible\" if age > 18 else \"Not Eligible\"\nprint(message)\nif 18 <= age < 65: \n    print(\"Eligible\")\n```\n\n    Eligible\n    Eligible\n\n##### compare: 'if' ; 'elif'\n\n```python\na = 2\nb = 18\nif a == b:\n    print(\"a = b\")\nif a < b:\n    print(\"a < b\")\nelif (b-a) > 5:\n    print(\"a<<b\")  # 'elif' won't work when former 'if' works.\nif (b-a) > 5:\n    print(\"a<<b\")  # 'if' will work nomatter former 'if' works or not.\nelse:\n    print(\"a > b\")\nprint(\"done\")\n\n```\n\n    a < b\n    a<<b\n    done\n\n### Logical\n\nLogical operators: and; or; not\n\n```python\nhigh_income = False\ngood_credit = True\n\nif high_income and good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\nif high_income or good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\nif (not high_income) and good_credit:\n    print(\"Eligible\")\nelse:\n    print(\"Not Eligible\")\n```\n\n    Not Eligible\n    Eligible\n    Eligible\n\n## Loop Statements\n\n### for\n\n```python\nfor number in range(3):\n    print(\"number =\", number)\nprint(number)\nfor number in range(1, 4):\n    print(\"number =\", number)\nfor number in range(1, 10, 2):\n    print(\"number =\", number)\n```\n\n    number = 0\n    number = 1\n    number = 2\n    2\n    number = 1\n    number = 2\n    number = 3\n    number = 1\n    number = 3\n    number = 5\n    number = 7\n    number = 9\n\n#### for...else\n\n```python\nfor number in range(1, 5):\n    print(\"number =\", number)\n    if number == 3:\n        print(\"Fail\")\n        break  # to jump out of the loop\nelse:\n    print(\"Success\")  # only when 'for' completed without jump out\n\nfor number in range(1, 5):\n    print(\"number =\", number)\nelse:\n    print(\"Success\")\n```\n\n    number = 1\n    number = 2\n    number = 3\n    Fail\n    number = 1\n    number = 2\n    number = 3\n    number = 4\n    Success\n\n### Iterable\n\n```python\nprint(type(range(3)))  # range\nfor x in range(3):\n    print(x)\n\nprint(type(\"I love xixi\"))  # string\nfor x in \"I love xixi\":\n    print(x)\n\nprint(type([1, 2, 3, 145]))  # list\nfor x in [1, 2, 3, 145]:\n    print(x)\n\n```\n\n    <class 'range'>\n    0\n    1\n    2\n    <class 'str'>\n    I\n     \n    l\n    o\n    v\n    e\n     \n    x\n    i\n    x\n    i\n    <class 'list'>\n    1\n    2\n    3\n    145\n\n### while\n\n```python\nnumber = 100\nwhile number > 0:\n    print(number)\n    number //= 2\n```\n\n    100\n    50\n    25\n    12\n    6\n    3\n    1\n\n# Functions\n\n## Definition\n\n```python\ndef greet(first_name=\"xi\", last_name=\"Xi\"):  # you can set default values for formal parameters.\n    print(f\"Hi {last_name}{first_name}\")  # Variables in the definition of a function are all local.\n\n\n# 2 empty lines after difinition\n```\n\n## Calling\n\n```python\ngreet()  # the parameter will use the default value\ngreet(\"xu\", \"Xu\")\ngreet(first_name=\"xu\", last_name=\"Xu\")\n```\n\n    Hi Xixi\n    Hi Xuxu\n    Hi Xuxu\n\n## Types of functions\n\n### 1- Perform a task\n\n```python\ndef task():\n    print(\"I performed a task!!\")\n\n\ntask()\n```\n\n    I performed a task!!\n\n### 2- Return a value\n\n```python\ndef value():\n    return f\"I returned a value!!\"\n\n\nmessage = value()\nprint(message)\n\nprint(task())\nprint(value())\n```\n\n    I returned a value!!\n    I performed a task!!\n    None\n    I returned a value!!\n","slug":"Python-draft","published":1,"comments":1,"photos":[],"link":"","_id":"clzhxyw600003f8og3svf7mz8","content":"<p>Here are my notes on learning Python.<br />\r\nHope that helps.</p>\r\n<p><strong><em>Continuously updating.</em></strong></p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"primitive-types\">Primitive Types</h1>\r\n<h2 id=\"number\">Number</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> + <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> - <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">2.9</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.9</span>))</span><br></pre></td></tr></table></figure>\r\n<pre><code>13\r\n7\r\n30\r\n3.3333333333333335\r\n3\r\n1\r\n1000\r\n2.9\r\n-3</code></pre>\r\n<h2 id=\"string\">String</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;   Python programming &quot;</span>  <span class=\"comment\"># Notice the blank</span></span><br><span class=\"line\"><span class=\"comment\"># Escape characters: \\n \\&quot; \\\\</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(course))</span><br></pre></td></tr></table></figure>\r\n<pre><code>22</code></pre>\r\n<h3 id=\"methods-for-string\">methods for string</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(course.upper())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.lower())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.title())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.strip())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.rstrip()+<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.lstrip()+<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># notice the difference</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.find(<span class=\"string\">&quot;pro&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.find(<span class=\"string\">&quot;Pro&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro&quot;</span> <span class=\"keyword\">in</span> course)  <span class=\"comment\"># Judgment statement</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;sdif&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.replace(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;j&quot;</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>   PYTHON PROGRAMMING \r\n   python programming \r\n   Python Programming \r\nPython programming\r\n   Python programminga\r\nPython programming a\r\n10\r\n-1\r\nTrue\r\nTrue\r\n   Python jrogramming </code></pre>\r\n<h3 id=\"operations-of-string\">operations of string</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you = <span class=\"string\">&quot;xixi&quot;</span></span><br><span class=\"line\">me = <span class=\"string\">&quot;xuxu&quot;</span></span><br><span class=\"line\">you_plus_me = you + me</span><br><span class=\"line\">you_love_me = <span class=\"string\">f&quot;<span class=\"subst\">&#123;you&#125;</span> love <span class=\"subst\">&#123;me&#125;</span> <span class=\"subst\">&#123;<span class=\"number\">500</span>+<span class=\"number\">10</span>*<span class=\"number\">2</span>&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(you_plus_me)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(you_love_me)</span><br></pre></td></tr></table></figure>\r\n<pre><code>xixixuxu\r\nxixi love xuxu 520</code></pre>\r\n<h2 id=\"boolean\">Boolean</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\r\n<pre><code>False\r\n0</code></pre>\r\n<h2 id=\"input-statement\">Input statement</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please input x:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here I inputed&quot;</span>, x ,<span class=\"string\">&quot;as an example&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(x))</span><br><span class=\"line\"><span class=\"comment\"># as a result, the type of the input character needs to be converted before it can be operated</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x)+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(x))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>Here I inputed 222 as an example\r\n&lt;class &#39;str&#39;&gt;\r\n224\r\n&lt;class &#39;str&#39;&gt;</code></pre>\r\n<h1 id=\"control-flow\">Control Flow</h1>\r\n<h2 id=\"conditional-statements\">Conditional Statements</h2>\r\n<h3 id=\"comparison\">Comparison</h3>\r\n<p>comparison operators: &gt; &lt; &gt;= &lt;= == !=</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;B&quot;</span>))  <span class=\"comment\"># show the ASCII value</span></span><br></pre></td></tr></table></figure>\r\n<pre><code>66</code></pre>\r\n<h4 id=\"comparison-statements\">Comparison Statements</h4>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a == b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a = b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &lt; b&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>a &lt; b</code></pre>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a more simpler statement</span></span><br><span class=\"line\">age = <span class=\"number\">25</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;Eligible&quot;</span> <span class=\"keyword\">if</span> age &gt; <span class=\"number\">18</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not Eligible&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">18</span> &lt;= age &lt; <span class=\"number\">65</span>: </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Eligible\r\nEligible</code></pre>\r\n<h5 id=\"compare-if-elif\">compare: 'if' ; 'elif'</h5>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a == b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a = b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &lt; b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> (b-a) &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&lt;&lt;b&quot;</span>)  <span class=\"comment\"># &#x27;elif&#x27; won&#x27;t work when former &#x27;if&#x27; works.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b-a) &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&lt;&lt;b&quot;</span>)  <span class=\"comment\"># &#x27;if&#x27; will work nomatter former &#x27;if&#x27; works or not.</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &gt; b&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>a &lt; b\r\na&lt;&lt;b\r\ndone</code></pre>\r\n<h3 id=\"logical\">Logical</h3>\r\n<p>Logical operators: and; or; not</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">high_income = <span class=\"literal\">False</span></span><br><span class=\"line\">good_credit = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> high_income <span class=\"keyword\">and</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> high_income <span class=\"keyword\">or</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> high_income) <span class=\"keyword\">and</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Not Eligible\r\nEligible\r\nEligible</code></pre>\r\n<h2 id=\"loop-statements\">Loop Statements</h2>\r\n<h3 id=\"for\">for</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br></pre></td></tr></table></figure>\r\n<pre><code>number = 0\r\nnumber = 1\r\nnumber = 2\r\n2\r\nnumber = 1\r\nnumber = 2\r\nnumber = 3\r\nnumber = 1\r\nnumber = 3\r\nnumber = 5\r\nnumber = 7\r\nnumber = 9</code></pre>\r\n<h4 id=\"for...else\">for...else</h4>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Fail&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># to jump out of the loop</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success&quot;</span>)  <span class=\"comment\"># only when &#x27;for&#x27; completed without jump out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>number = 1\r\nnumber = 2\r\nnumber = 3\r\nFail\r\nnumber = 1\r\nnumber = 2\r\nnumber = 3\r\nnumber = 4\r\nSuccess</code></pre>\r\n<h3 id=\"iterable\">Iterable</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">range</span>(<span class=\"number\">3</span>)))  <span class=\"comment\"># range</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&quot;I love xixi&quot;</span>))  <span class=\"comment\"># string</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">&quot;I love xixi&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">145</span>]))  <span class=\"comment\"># list</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">145</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>&lt;class &#39;range&#39;&gt;\r\n0\r\n1\r\n2\r\n&lt;class &#39;str&#39;&gt;\r\nI\r\n \r\nl\r\no\r\nv\r\ne\r\n \r\nx\r\ni\r\nx\r\ni\r\n&lt;class &#39;list&#39;&gt;\r\n1\r\n2\r\n3\r\n145</code></pre>\r\n<h3 id=\"while\">while</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">    number //= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\r\n<pre><code>100\r\n50\r\n25\r\n12\r\n6\r\n3\r\n1</code></pre>\r\n<h1 id=\"functions\">Functions</h1>\r\n<h2 id=\"definition\">Definition</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">first_name=<span class=\"string\">&quot;xi&quot;</span>, last_name=<span class=\"string\">&quot;Xi&quot;</span></span>):</span>  <span class=\"comment\"># you can set default values for formal parameters.</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hi <span class=\"subst\">&#123;last_name&#125;</span><span class=\"subst\">&#123;first_name&#125;</span>&quot;</span>)  <span class=\"comment\"># Variables in the definition of a function are all local.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 empty lines after difinition</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"calling\">Calling</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet()  <span class=\"comment\"># the parameter will use the default value</span></span><br><span class=\"line\">greet(<span class=\"string\">&quot;xu&quot;</span>, <span class=\"string\">&quot;Xu&quot;</span>)</span><br><span class=\"line\">greet(first_name=<span class=\"string\">&quot;xu&quot;</span>, last_name=<span class=\"string\">&quot;Xu&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Hi Xixi\r\nHi Xuxu\r\nHi Xuxu</code></pre>\r\n<h2 id=\"types-of-functions\">Types of functions</h2>\r\n<h3 id=\"perform-a-task\">1- Perform a task</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I performed a task!!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">task()</span><br></pre></td></tr></table></figure>\r\n<pre><code>I performed a task!!</code></pre>\r\n<h3 id=\"return-a-value\">2- Return a value</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;I returned a value!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">message = value()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(task())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(value())</span><br></pre></td></tr></table></figure>\r\n<pre><code>I returned a value!!\r\nI performed a task!!\r\nNone\r\nI returned a value!!</code></pre>\r\n","site":{"data":{}},"excerpt":"<p>Here are my notes on learning Python.<br />\r\nHope that helps.</p>\r\n<p><strong><em>Continuously updating.</em></strong></p>","more":"<h1 id=\"primitive-types\">Primitive Types</h1>\r\n<h2 id=\"number\">Number</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> + <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> - <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> / <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> // <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> % <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> ** <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">2.9</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.9</span>))</span><br></pre></td></tr></table></figure>\r\n<pre><code>13\r\n7\r\n30\r\n3.3333333333333335\r\n3\r\n1\r\n1000\r\n2.9\r\n-3</code></pre>\r\n<h2 id=\"string\">String</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">course = <span class=\"string\">&quot;   Python programming &quot;</span>  <span class=\"comment\"># Notice the blank</span></span><br><span class=\"line\"><span class=\"comment\"># Escape characters: \\n \\&quot; \\\\</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(course))</span><br></pre></td></tr></table></figure>\r\n<pre><code>22</code></pre>\r\n<h3 id=\"methods-for-string\">methods for string</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(course.upper())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.lower())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.title())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.strip())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.rstrip()+<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.lstrip()+<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># notice the difference</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.find(<span class=\"string\">&quot;pro&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.find(<span class=\"string\">&quot;Pro&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;pro&quot;</span> <span class=\"keyword\">in</span> course)  <span class=\"comment\"># Judgment statement</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;sdif&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> course)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(course.replace(<span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;j&quot;</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>   PYTHON PROGRAMMING \r\n   python programming \r\n   Python Programming \r\nPython programming\r\n   Python programminga\r\nPython programming a\r\n10\r\n-1\r\nTrue\r\nTrue\r\n   Python jrogramming </code></pre>\r\n<h3 id=\"operations-of-string\">operations of string</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you = <span class=\"string\">&quot;xixi&quot;</span></span><br><span class=\"line\">me = <span class=\"string\">&quot;xuxu&quot;</span></span><br><span class=\"line\">you_plus_me = you + me</span><br><span class=\"line\">you_love_me = <span class=\"string\">f&quot;<span class=\"subst\">&#123;you&#125;</span> love <span class=\"subst\">&#123;me&#125;</span> <span class=\"subst\">&#123;<span class=\"number\">500</span>+<span class=\"number\">10</span>*<span class=\"number\">2</span>&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(you_plus_me)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(you_love_me)</span><br></pre></td></tr></table></figure>\r\n<pre><code>xixixuxu\r\nxixi love xuxu 520</code></pre>\r\n<h2 id=\"boolean\">Boolean</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\r\n<pre><code>False\r\n0</code></pre>\r\n<h2 id=\"input-statement\">Input statement</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please input x:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here I inputed&quot;</span>, x ,<span class=\"string\">&quot;as an example&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(x))</span><br><span class=\"line\"><span class=\"comment\"># as a result, the type of the input character needs to be converted before it can be operated</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x)+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(x))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>Here I inputed 222 as an example\r\n&lt;class &#39;str&#39;&gt;\r\n224\r\n&lt;class &#39;str&#39;&gt;</code></pre>\r\n<h1 id=\"control-flow\">Control Flow</h1>\r\n<h2 id=\"conditional-statements\">Conditional Statements</h2>\r\n<h3 id=\"comparison\">Comparison</h3>\r\n<p>comparison operators: &gt; &lt; &gt;= &lt;= == !=</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;B&quot;</span>))  <span class=\"comment\"># show the ASCII value</span></span><br></pre></td></tr></table></figure>\r\n<pre><code>66</code></pre>\r\n<h4 id=\"comparison-statements\">Comparison Statements</h4>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a == b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a = b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &lt; b&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>a &lt; b</code></pre>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a more simpler statement</span></span><br><span class=\"line\">age = <span class=\"number\">25</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;Eligible&quot;</span> <span class=\"keyword\">if</span> age &gt; <span class=\"number\">18</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;Not Eligible&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">18</span> &lt;= age &lt; <span class=\"number\">65</span>: </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Eligible\r\nEligible</code></pre>\r\n<h5 id=\"compare-if-elif\">compare: 'if' ; 'elif'</h5>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">b = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> a == b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a = b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &lt; b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> (b-a) &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&lt;&lt;b&quot;</span>)  <span class=\"comment\"># &#x27;elif&#x27; won&#x27;t work when former &#x27;if&#x27; works.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b-a) &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&lt;&lt;b&quot;</span>)  <span class=\"comment\"># &#x27;if&#x27; will work nomatter former &#x27;if&#x27; works or not.</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a &gt; b&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>a &lt; b\r\na&lt;&lt;b\r\ndone</code></pre>\r\n<h3 id=\"logical\">Logical</h3>\r\n<p>Logical operators: and; or; not</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">high_income = <span class=\"literal\">False</span></span><br><span class=\"line\">good_credit = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> high_income <span class=\"keyword\">and</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> high_income <span class=\"keyword\">or</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> high_income) <span class=\"keyword\">and</span> good_credit:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eligible&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Not Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Not Eligible\r\nEligible\r\nEligible</code></pre>\r\n<h2 id=\"loop-statements\">Loop Statements</h2>\r\n<h3 id=\"for\">for</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br></pre></td></tr></table></figure>\r\n<pre><code>number = 0\r\nnumber = 1\r\nnumber = 2\r\n2\r\nnumber = 1\r\nnumber = 2\r\nnumber = 3\r\nnumber = 1\r\nnumber = 3\r\nnumber = 5\r\nnumber = 7\r\nnumber = 9</code></pre>\r\n<h4 id=\"for...else\">for...else</h4>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Fail&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># to jump out of the loop</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success&quot;</span>)  <span class=\"comment\"># only when &#x27;for&#x27; completed without jump out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;number =&quot;</span>, number)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>number = 1\r\nnumber = 2\r\nnumber = 3\r\nFail\r\nnumber = 1\r\nnumber = 2\r\nnumber = 3\r\nnumber = 4\r\nSuccess</code></pre>\r\n<h3 id=\"iterable\">Iterable</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">range</span>(<span class=\"number\">3</span>)))  <span class=\"comment\"># range</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&quot;I love xixi&quot;</span>))  <span class=\"comment\"># string</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">&quot;I love xixi&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">145</span>]))  <span class=\"comment\"># list</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">145</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<pre><code>&lt;class &#39;range&#39;&gt;\r\n0\r\n1\r\n2\r\n&lt;class &#39;str&#39;&gt;\r\nI\r\n \r\nl\r\no\r\nv\r\ne\r\n \r\nx\r\ni\r\nx\r\ni\r\n&lt;class &#39;list&#39;&gt;\r\n1\r\n2\r\n3\r\n145</code></pre>\r\n<h3 id=\"while\">while</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">    number //= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\r\n<pre><code>100\r\n50\r\n25\r\n12\r\n6\r\n3\r\n1</code></pre>\r\n<h1 id=\"functions\">Functions</h1>\r\n<h2 id=\"definition\">Definition</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">first_name=<span class=\"string\">&quot;xi&quot;</span>, last_name=<span class=\"string\">&quot;Xi&quot;</span></span>):</span>  <span class=\"comment\"># you can set default values for formal parameters.</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hi <span class=\"subst\">&#123;last_name&#125;</span><span class=\"subst\">&#123;first_name&#125;</span>&quot;</span>)  <span class=\"comment\"># Variables in the definition of a function are all local.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 empty lines after difinition</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"calling\">Calling</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet()  <span class=\"comment\"># the parameter will use the default value</span></span><br><span class=\"line\">greet(<span class=\"string\">&quot;xu&quot;</span>, <span class=\"string\">&quot;Xu&quot;</span>)</span><br><span class=\"line\">greet(first_name=<span class=\"string\">&quot;xu&quot;</span>, last_name=<span class=\"string\">&quot;Xu&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<pre><code>Hi Xixi\r\nHi Xuxu\r\nHi Xuxu</code></pre>\r\n<h2 id=\"types-of-functions\">Types of functions</h2>\r\n<h3 id=\"perform-a-task\">1- Perform a task</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I performed a task!!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">task()</span><br></pre></td></tr></table></figure>\r\n<pre><code>I performed a task!!</code></pre>\r\n<h3 id=\"return-a-value\">2- Return a value</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;I returned a value!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">message = value()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(task())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(value())</span><br></pre></td></tr></table></figure>\r\n<pre><code>I returned a value!!\r\nI performed a task!!\r\nNone\r\nI returned a value!!</code></pre>"},{"title":"Hi","date":"2021-12-17T15:00:00.000Z","top":true,"_content":"\nv2misaka is here!\n\n&emsp;Hope you can find something you want~\n\n~misakamisaka says with greetings.\n","source":"_posts/Hi.md","raw":"---\ntitle: Hi\ndate: 2021-12-18\ntop: true\n---\n\nv2misaka is here!\n\n&emsp;Hope you can find something you want~\n\n~misakamisaka says with greetings.\n","slug":"Hi","published":1,"updated":"2024-08-06T04:27:02.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzhxyw640005f8ogbyjc73kj","content":"<p>v2misaka is here!</p>\r\n<p> Hope you can find something you want~</p>\r\n<p>~misakamisaka says with greetings.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>v2misaka is here!</p>\r\n<p> Hope you can find something you want~</p>\r\n<p>~misakamisaka says with greetings.</p>\r\n"},{"title":"How to install CASTEP.","date":"2021-12-28T13:47:00.000Z","_content":"This post is ***not*** a substitute to official tutorial, and is just a simplified version.  \nIf you have obtain CASTEP, after unpacking, you can read the official install tutorial: **README.INSTALL**\n\n<!-- more -->\nA cost-free worldwide source code license to CASTEP and NMR CASTEP for academic use is availible.\nBefore reading this post, you can get CASTEP through the website:\n<center>http://www.castep.org/CASTEP/GettingCASTEP </center>  \n<br/>\n\n# System Environment\n\nThese are required to compile CASTEP:  \n**<font size=\"4\">1. Fortran 2003 compiler. </font>**  \nGNU fortran and Intel fortran are both availible.\nIn the **README.INSTALL** file there will be the recommended version of Fortran compiler.\n\n**<font size=\"4\">2. Numerical libraries. (implementing the LAPACK and BLAS functionality)</font>**  \nIntel MKL is recommended as it also contains an optimised FFT library. I use mkl included in Intel oneAPI.  \n**<font size=\"4\">3. GNU make version 3.81 or later.</font>**  \n**<font size=\"4\">4. Python.</font>**  \n**<font size=\"4\">5. Optimised FFT library</font>**  \n**<font size=\"4\">6. Openmpi</font>**\n\n# Install\n\nWe use CASTEP-21.11 as an example.\n\nFirst of all:  \n\n    tar -zxf CASTEP-21.11.tar.gz\n    cd CASTEP-21.1\n    make\nThen open the file: *Makefile*  \nModify the value of **FFT** and **MATHLIBS** to `mkl`. Save and quit.  \n\nThen install through code:\n\n    make install\nAfter installation, you can check through code:\n\n    make check FFT=mkl MATHLIBS=mkl\n\n# Calling the programme\n\nYou can call the programme through code:\n\n    castep.serial <seedname>\nIf you have not (or cannot) add castep into *path*, use the code:\n\n     *...\\linux_x86_64_ifort\\castep.serial <seedname>\n\n# Online Tutorials\n\n<p align=\"left\">Online and official tutorial is availible through the website:  </p>\n<center>http://www.castep.org/CASTEP/OnlineTutorials </center>\n","source":"_posts/How-to-install-CASTEP.md","raw":"---\ntitle: How to install CASTEP.\ndate: 2021/12/28 22:47\ncategories: \n- Tutorials\n- CASTEP\n---\nThis post is ***not*** a substitute to official tutorial, and is just a simplified version.  \nIf you have obtain CASTEP, after unpacking, you can read the official install tutorial: **README.INSTALL**\n\n<!-- more -->\nA cost-free worldwide source code license to CASTEP and NMR CASTEP for academic use is availible.\nBefore reading this post, you can get CASTEP through the website:\n<center>http://www.castep.org/CASTEP/GettingCASTEP </center>  \n<br/>\n\n# System Environment\n\nThese are required to compile CASTEP:  \n**<font size=\"4\">1. Fortran 2003 compiler. </font>**  \nGNU fortran and Intel fortran are both availible.\nIn the **README.INSTALL** file there will be the recommended version of Fortran compiler.\n\n**<font size=\"4\">2. Numerical libraries. (implementing the LAPACK and BLAS functionality)</font>**  \nIntel MKL is recommended as it also contains an optimised FFT library. I use mkl included in Intel oneAPI.  \n**<font size=\"4\">3. GNU make version 3.81 or later.</font>**  \n**<font size=\"4\">4. Python.</font>**  \n**<font size=\"4\">5. Optimised FFT library</font>**  \n**<font size=\"4\">6. Openmpi</font>**\n\n# Install\n\nWe use CASTEP-21.11 as an example.\n\nFirst of all:  \n\n    tar -zxf CASTEP-21.11.tar.gz\n    cd CASTEP-21.1\n    make\nThen open the file: *Makefile*  \nModify the value of **FFT** and **MATHLIBS** to `mkl`. Save and quit.  \n\nThen install through code:\n\n    make install\nAfter installation, you can check through code:\n\n    make check FFT=mkl MATHLIBS=mkl\n\n# Calling the programme\n\nYou can call the programme through code:\n\n    castep.serial <seedname>\nIf you have not (or cannot) add castep into *path*, use the code:\n\n     *...\\linux_x86_64_ifort\\castep.serial <seedname>\n\n# Online Tutorials\n\n<p align=\"left\">Online and official tutorial is availible through the website:  </p>\n<center>http://www.castep.org/CASTEP/OnlineTutorials </center>\n","slug":"How-to-install-CASTEP","published":1,"updated":"2024-08-06T04:27:02.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clzhxyw6b000df8og7kvr5han","content":"<p>This post is <strong><em>not</em></strong> a substitute to official\r\ntutorial, and is just a simplified version.<br />\r\nIf you have obtain CASTEP, after unpacking, you can read the official\r\ninstall tutorial: <strong>README.INSTALL</strong></p>\r\n<span id=\"more\"></span>\r\nA cost-free worldwide source code license to CASTEP and NMR CASTEP for\r\nacademic use is availible. Before reading this post, you can get CASTEP\r\nthrough the website:\r\n<center>\r\nhttp://www.castep.org/CASTEP/GettingCASTEP\r\n</center>\r\n<p><br/></p>\r\n<h1 id=\"system-environment\">System Environment</h1>\r\n<p>These are required to compile CASTEP:<br />\r\n<strong><font size=\"4\">1. Fortran 2003 compiler. </font></strong><br />\r\nGNU fortran and Intel fortran are both availible. In the\r\n<strong>README.INSTALL</strong> file there will be the recommended\r\nversion of Fortran compiler.</p>\r\n<p><strong><font size=\"4\">2. Numerical libraries. (implementing the\r\nLAPACK and BLAS functionality)</font></strong><br />\r\nIntel MKL is recommended as it also contains an optimised FFT library. I\r\nuse mkl included in Intel oneAPI.<br />\r\n<strong><font size=\"4\">3. GNU make version 3.81 or\r\nlater.</font></strong><br />\r\n<strong><font size=\"4\">4. Python.</font></strong><br />\r\n<strong><font size=\"4\">5. Optimised FFT library</font></strong><br />\r\n<strong><font size=\"4\">6. Openmpi</font></strong></p>\r\n<h1 id=\"install\">Install</h1>\r\n<p>We use CASTEP-21.11 as an example.</p>\r\n<p>First of all:</p>\r\n<pre><code>tar -zxf CASTEP-21.11.tar.gz\r\ncd CASTEP-21.1\r\nmake</code></pre>\r\n<p>Then open the file: <em>Makefile</em><br />\r\nModify the value of <strong>FFT</strong> and <strong>MATHLIBS</strong>\r\nto <code>mkl</code>. Save and quit.</p>\r\n<p>Then install through code:</p>\r\n<pre><code>make install</code></pre>\r\n<p>After installation, you can check through code:</p>\r\n<pre><code>make check FFT=mkl MATHLIBS=mkl</code></pre>\r\n<h1 id=\"calling-the-programme\">Calling the programme</h1>\r\n<p>You can call the programme through code:</p>\r\n<pre><code>castep.serial &lt;seedname&gt;</code></pre>\r\n<p>If you have not (or cannot) add castep into <em>path</em>, use the\r\ncode:</p>\r\n<pre><code> *...\\linux_x86_64_ifort\\castep.serial &lt;seedname&gt;</code></pre>\r\n<h1 id=\"online-tutorials\">Online Tutorials</h1>\r\n<p align=\"left\">\r\nOnline and official tutorial is availible through the website:\r\n</p>\r\n<center>\r\nhttp://www.castep.org/CASTEP/OnlineTutorials\r\n</center>\r\n","site":{"data":{}},"excerpt":"<p>This post is <strong><em>not</em></strong> a substitute to official\r\ntutorial, and is just a simplified version.<br />\r\nIf you have obtain CASTEP, after unpacking, you can read the official\r\ninstall tutorial: <strong>README.INSTALL</strong></p>","more":"A cost-free worldwide source code license to CASTEP and NMR CASTEP for\r\nacademic use is availible. Before reading this post, you can get CASTEP\r\nthrough the website:\r\n<center>\r\nhttp://www.castep.org/CASTEP/GettingCASTEP\r\n</center>\r\n<p><br/></p>\r\n<h1 id=\"system-environment\">System Environment</h1>\r\n<p>These are required to compile CASTEP:<br />\r\n<strong><font size=\"4\">1. Fortran 2003 compiler. </font></strong><br />\r\nGNU fortran and Intel fortran are both availible. In the\r\n<strong>README.INSTALL</strong> file there will be the recommended\r\nversion of Fortran compiler.</p>\r\n<p><strong><font size=\"4\">2. Numerical libraries. (implementing the\r\nLAPACK and BLAS functionality)</font></strong><br />\r\nIntel MKL is recommended as it also contains an optimised FFT library. I\r\nuse mkl included in Intel oneAPI.<br />\r\n<strong><font size=\"4\">3. GNU make version 3.81 or\r\nlater.</font></strong><br />\r\n<strong><font size=\"4\">4. Python.</font></strong><br />\r\n<strong><font size=\"4\">5. Optimised FFT library</font></strong><br />\r\n<strong><font size=\"4\">6. Openmpi</font></strong></p>\r\n<h1 id=\"install\">Install</h1>\r\n<p>We use CASTEP-21.11 as an example.</p>\r\n<p>First of all:</p>\r\n<pre><code>tar -zxf CASTEP-21.11.tar.gz\r\ncd CASTEP-21.1\r\nmake</code></pre>\r\n<p>Then open the file: <em>Makefile</em><br />\r\nModify the value of <strong>FFT</strong> and <strong>MATHLIBS</strong>\r\nto <code>mkl</code>. Save and quit.</p>\r\n<p>Then install through code:</p>\r\n<pre><code>make install</code></pre>\r\n<p>After installation, you can check through code:</p>\r\n<pre><code>make check FFT=mkl MATHLIBS=mkl</code></pre>\r\n<h1 id=\"calling-the-programme\">Calling the programme</h1>\r\n<p>You can call the programme through code:</p>\r\n<pre><code>castep.serial &lt;seedname&gt;</code></pre>\r\n<p>If you have not (or cannot) add castep into <em>path</em>, use the\r\ncode:</p>\r\n<pre><code> *...\\linux_x86_64_ifort\\castep.serial &lt;seedname&gt;</code></pre>\r\n<h1 id=\"online-tutorials\">Online Tutorials</h1>\r\n<p align=\"left\">\r\nOnline and official tutorial is availible through the website:\r\n</p>\r\n<center>\r\nhttp://www.castep.org/CASTEP/OnlineTutorials\r\n</center>"}],"PostAsset":[],"PostCategory":[{"post_id":"clzhxyw5y0001f8og0xnw46rg","category_id":"clzhxyw620004f8og11mp95du","_id":"clzhxyw670009f8og2uhwdhb3"},{"post_id":"clzhxyw5y0001f8og0xnw46rg","category_id":"clzhxyw660007f8ogb2jwb08u","_id":"clzhxyw67000af8ogcc2w8pvi"},{"post_id":"clzhxyw600003f8og3svf7mz8","category_id":"clzhxyw650006f8og2qjzfy14","_id":"clzhxyw67000bf8og1b75g7dv"},{"post_id":"clzhxyw600003f8og3svf7mz8","category_id":"clzhxyw660008f8ogdlcyfib4","_id":"clzhxyw67000cf8og07884m2t"},{"post_id":"clzhxyw6b000df8og7kvr5han","category_id":"clzhxyw620004f8og11mp95du","_id":"clzhxyw6c000ff8og1faz3gvf"},{"post_id":"clzhxyw6b000df8og7kvr5han","category_id":"clzhxyw6c000ef8oggeho03pv","_id":"clzhxyw6c000gf8ogcdrqfxbz"}],"PostTag":[],"Tag":[]}}