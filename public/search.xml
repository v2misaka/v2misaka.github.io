<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hi</title>
    <url>/2021/12/18/Hi/</url>
    <content><![CDATA[<p>v2misaka is here!<br>I will post something I learned about computational chemistry.<br>Hope you can find something you want!<br>&emsp;&emsp;~misakamisaka says happily and cutely.</p>
]]></content>
  </entry>
  <entry>
    <title>Python note</title>
    <url>/2021/12/29/Python-draft/</url>
    <content><![CDATA[<p>Here are my notes on learning Python.<br>Hope that helps.</p>
<p><em><strong>Continuously updating.</strong></em></p>
<span id="more"></span>
<h1 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> - <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> * <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> / <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> // <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> % <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">2.9</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(-<span class="number">2.9</span>))</span><br></pre></td></tr></table></figure>

<pre><code>13
7
30
3.3333333333333335
3
1
1000
2.9
-3
</code></pre>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">course = <span class="string">&quot;   Python programming &quot;</span>  <span class="comment"># Notice the blank</span></span><br><span class="line"><span class="comment"># Escape characters：\n \&quot; \\</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(course))</span><br></pre></td></tr></table></figure>

<pre><code>22
</code></pre>
<h3 id="methods-for-string"><a href="#methods-for-string" class="headerlink" title="methods for string"></a>methods for string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(course.upper())</span><br><span class="line"><span class="built_in">print</span>(course.lower())</span><br><span class="line"><span class="built_in">print</span>(course.title())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(course.strip())</span><br><span class="line"><span class="built_in">print</span>(course.rstrip()+<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(course.lstrip()+<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># notice the difference</span></span><br><span class="line"><span class="built_in">print</span>(course.find(<span class="string">&quot;pro&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(course.find(<span class="string">&quot;Pro&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pro&quot;</span> <span class="keyword">in</span> course)  <span class="comment"># Judgment statement</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sdif&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> course)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(course.replace(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;j&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>   PYTHON PROGRAMMING 
   python programming 
   Python Programming 
Python programming
   Python programminga
Python programming a
10
-1
True
True
   Python jrogramming 
</code></pre>
<h3 id="operations-of-string"><a href="#operations-of-string" class="headerlink" title="operations of string"></a>operations of string</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">you = <span class="string">&quot;xixi&quot;</span></span><br><span class="line">me = <span class="string">&quot;xuxu&quot;</span></span><br><span class="line">you_plus_me = you + me</span><br><span class="line">you_love_me = <span class="string">f&quot;<span class="subst">&#123;you&#125;</span> love <span class="subst">&#123;me&#125;</span> <span class="subst">&#123;<span class="number">500</span>+<span class="number">10</span>*<span class="number">2</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(you_plus_me)</span><br><span class="line"><span class="built_in">print</span>(you_love_me)</span><br></pre></td></tr></table></figure>

<pre><code>xixixuxu
xixi love xuxu 520
</code></pre>
<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<pre><code>False
0
</code></pre>
<h2 id="Input-statement"><a href="#Input-statement" class="headerlink" title="Input statement"></a>Input statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;please input x:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here I inputed&quot;</span>, x ,<span class="string">&quot;as an example&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># as a result, the type of the input character needs to be converted before it can be operated</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(x)+<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>Here I inputed 222 as an example
&lt;class &#39;str&#39;&gt;
224
&lt;class &#39;str&#39;&gt;
</code></pre>
<h1 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h1><h2 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h2><h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><p>comparison operators：&gt; &lt; &gt;= &lt;= == !=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;B&quot;</span>))  <span class="comment"># show the ASCII value</span></span><br></pre></td></tr></table></figure>

<pre><code>66
</code></pre>
<h4 id="Comparison-Statements"><a href="#Comparison-Statements" class="headerlink" title="Comparison Statements"></a>Comparison Statements</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a = b&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a &lt; b&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a &lt; b
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a more simpler statement</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line">message = <span class="string">&quot;Eligible&quot;</span> <span class="keyword">if</span> age &gt; <span class="number">18</span> <span class="keyword">else</span> <span class="string">&quot;Not Eligible&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">if</span> <span class="number">18</span> &lt;= age &lt; <span class="number">65</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Eligible
Eligible
</code></pre>
<h5 id="compare-‘if’-‘elif’"><a href="#compare-‘if’-‘elif’" class="headerlink" title="compare: ‘if’ ; ‘elif’"></a>compare: ‘if’ ; ‘elif’</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a = b&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a &lt; b&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> (b-a) &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a&lt;&lt;b&quot;</span>)  <span class="comment"># &#x27;elif&#x27; won&#x27;t work when former &#x27;if&#x27; works.</span></span><br><span class="line"><span class="keyword">if</span> (b-a) &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a&lt;&lt;b&quot;</span>)  <span class="comment"># &#x27;if&#x27; will work nomatter former &#x27;if&#x27; works or not.</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a &gt; b&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>a &lt; b
a&lt;&lt;b
done
</code></pre>
<h3 id="Logical"><a href="#Logical" class="headerlink" title="Logical"></a>Logical</h3><p>Logical operators：and； or； not</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">high_income = <span class="literal">False</span></span><br><span class="line">good_credit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> high_income <span class="keyword">and</span> good_credit:  <span class="comment"># 与</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Eligible&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Eligible&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> high_income <span class="keyword">or</span> good_credit:  <span class="comment"># 或</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Eligible&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Eligible&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> high_income) <span class="keyword">and</span> good_credit:  <span class="comment"># 非</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Eligible&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Eligible&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Not Eligible
Eligible
Eligible
</code></pre>
<h2 id="Loop-Statements"><a href="#Loop-Statements" class="headerlink" title="Loop Statements"></a>Loop Statements</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number =&quot;</span>, number)</span><br><span class="line"><span class="built_in">print</span>(number)</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number =&quot;</span>, number)</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number =&quot;</span>, number)</span><br></pre></td></tr></table></figure>

<pre><code>number = 0
number = 1
number = 2
2
number = 1
number = 2
number = 3
number = 1
number = 3
number = 5
number = 7
number = 9
</code></pre>
<h4 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number =&quot;</span>, number)</span><br><span class="line">    <span class="keyword">if</span> number == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Fail&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># to jump out of the loop</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)  <span class="comment"># only when &#x27;for&#x27; completed without jump out</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number =&quot;</span>, number)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>number = 1
number = 2
number = 3
Fail
number = 1
number = 2
number = 3
number = 4
Success
</code></pre>
<h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">range</span>(<span class="number">3</span>)))  <span class="comment"># range</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;I love xixi&quot;</span>))  <span class="comment"># string</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&quot;I love xixi&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">145</span>]))  <span class="comment"># list</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">145</span>]:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;range&#39;&gt;
0
1
2
&lt;class &#39;str&#39;&gt;
I
 
l
o
v
e
 
x
i
x
i
&lt;class &#39;list&#39;&gt;
1
2
3
145
</code></pre>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> number &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br><span class="line">    number //= <span class="number">2</span></span><br></pre></td></tr></table></figure>

<pre><code>100
50
25
12
6
3
1
</code></pre>
<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">first_name=<span class="string">&quot;Xixi&quot;</span>, last_name=<span class="string">&quot;Zhou&quot;</span></span>):</span>  <span class="comment"># you can set default values for formal parameters.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hi <span class="subst">&#123;last_name&#125;</span> <span class="subst">&#123;first_name&#125;</span>&quot;</span>)  <span class="comment"># Variables in the definition of a function are all local.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 empty lines after difinition</span></span><br></pre></td></tr></table></figure>

<h2 id="Calling"><a href="#Calling" class="headerlink" title="Calling"></a>Calling</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greet()  <span class="comment"># the parameter will use the default value</span></span><br><span class="line">greet(<span class="string">&quot;Shuran&quot;</span>, <span class="string">&quot;Xu&quot;</span>)</span><br><span class="line">greet(first_name=<span class="string">&quot;Shuran&quot;</span>, last_name=<span class="string">&quot;Xu&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Hi Zhou Xixi
Hi Xu Shuran
Hi Xu Shuran
</code></pre>
<h2 id="Types-of-functions"><a href="#Types-of-functions" class="headerlink" title="Types of functions"></a>Types of functions</h2><h3 id="1-Perform-a-task"><a href="#1-Perform-a-task" class="headerlink" title="1- Perform a task:"></a>1- Perform a task:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I performed a task!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task()</span><br></pre></td></tr></table></figure>

<pre><code>I performed a task!!
</code></pre>
<h3 id="2-Return-a-value"><a href="#2-Return-a-value" class="headerlink" title="2- Return a value"></a>2- Return a value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">value</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;I returned a value!!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = value()</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(task())</span><br><span class="line"><span class="built_in">print</span>(value())</span><br></pre></td></tr></table></figure>

<pre><code>I returned a value!!
I performed a task!!
None
I returned a value!!
</code></pre>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>How to install CASTEP.</title>
    <url>/2021/12/28/How-to-install-CASTEP/</url>
    <content><![CDATA[<p>This post is <em><strong>not</strong></em> a substitute to official tutorial, and is just a simplified version, which suit better if you want to install CASTEP on HPC of Wuhan University.<br>If you have obtain CASTEP, after unpacking, you can read the official install tutorial: <strong>README.INSTALL</strong> . </p>
<span id="more"></span>
<p>A cost-free worldwide source code license to CASTEP and NMR CASTEP for academic use is availible.<br>Before reading this post, you can get CASTEP through the website:</p>
<center>http://www.castep.org/CASTEP/GettingCASTEP </center>  
<br/>
 

<h1 id="System-Environment"><a href="#System-Environment" class="headerlink" title="System Environment"></a>System Environment</h1><p>These are required to compile CASTEP:<br><strong><font size="4">1. Fortran 2003 compiler. </font></strong><br>Here I recommend GNU Fortran (4.9.1, 5.4.0, 6.3-4, 7.2-7.5, 8.*, 9.2, 9.3.0, 10.1.0).<br><strong><font size="4">2. Numerical libraries. (implementing the LAPACK and BLAS functionality)</font></strong><br>Intel MKL is recommended as it also contains an optimised FFT library. I use mkl included in Intel oneAPI.<br><strong><font size="4">3. GNU make version 3.81 or later.</font></strong><br><strong><font size="4">4. Python.</font></strong><br><strong><font size="4">5. Optimised FFT library</font></strong><br>Intel MKL</p>
<p>While using HPC of WHU, you should load <strong>scl/gcc4.9</strong> and <strong>intel/oneapi/2021</strong> first while install and in the <em>.sbatch</em> file.</p>
<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>We use CASTEP-21.11 as an example.</p>
<p>First of all:  </p>
<pre><code>tar -zxf CASTEP-21.11.tar.gz
cd CASTEP-21.1
make
</code></pre>
<p>Then open the file: <em>Makefile</em><br>Modify the value of <strong>FFT</strong> and <strong>MATHLIBS</strong> to <code>mkl</code>. Save and quit.  </p>
<p>Enter <code>bin</code>, create a directory named: <code>linux_x86_64_ifort serial</code>.</p>
<p>Then install through code:</p>
<pre><code>make install
</code></pre>
<p>After installation, you can check through code:</p>
<pre><code>make check FFT=mkl MATHLIBS=mkl
</code></pre>
<h1 id="Calling-the-programme"><a href="#Calling-the-programme" class="headerlink" title="Calling the programme"></a>Calling the programme</h1><p>You can call the programme through code:</p>
<pre><code>castep.serial &lt;seedname&gt;
</code></pre>
<p>If you have not (or cannot) add castep into <em>path</em>, use the code:</p>
<pre><code> *...\linux_x86_64_ifort\castep.serial &lt;seedname&gt;
</code></pre>
<h1 id="Online-Tutorials"><a href="#Online-Tutorials" class="headerlink" title="Online Tutorials"></a>Online Tutorials</h1><p align="left">Online and official tutorial is availible through the website:  </p>
<center>http://www.castep.org/CASTEP/OnlineTutorials </center>]]></content>
      <categories>
        <category>Code and Software</category>
        <category>CASTEP</category>
      </categories>
  </entry>
</search>
